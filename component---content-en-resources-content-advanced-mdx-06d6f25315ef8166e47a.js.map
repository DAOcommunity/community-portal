{"version":3,"sources":["webpack:///./content/en/resources/content/advanced.mdx","webpack:///./src/modules/layouts/site_layout.js","webpack:///./src/modules/layouts/mdx_layout.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","Tout","Box","Link","Aligner","Image","InfoBlock","Button","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","image","alt","icon","color","stroke","fade","xCenter","sx","marginBottom","src","to","background","isMDXComponent","Layout","children","seo","flexDirection","minHeight","height","as","maxWidth","flex","width","m","pr","pt","position","className","pageContext","uri","frontmatter","title","description","keywords","featuredImage","status","hideLanguageSelector","hideSidenav","hideBreadcrumbs","statusProps","text","currentTopSection","useLocation","pathname","split","hasTopSection","undefined","renderSidenav","firstHeading","React","Children","toArray","find","c","getFirstHeading","pop","boundaryElement","minWidth","display","dontUpdateHolderHeightWhenSticky","style","hideOnBoundaryHit","flexGrow","pl","mt","pb","marginTop","sticky","justifyContent","alignItems","flexWrap","px","lineHeight","mb"],"mappings":"4OAMaA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,cAAgBH,EAAO,4EAC7B,oBAASC,KAGZG,EAAOL,EAAc,QACrBM,EAAMN,EAAc,OACpBO,EAAOP,EAAc,QACrBQ,EAAUR,EAAc,WACxBS,EAAQT,EAAc,SACtBU,EAAYV,EAAc,aAC1BW,EAASX,EAAc,UACvBY,EAAc,CAClBb,gBAEIc,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGd,EACF,8BACD,OAAO,cAACW,EAAD,iBAAeD,EAAiBV,EAAhC,CAAuCc,WAAYA,EAAYC,QAAQ,cAG5E,oCACA,yEAAsD,4BAAYC,WAAW,KAAvB,SAAtD,iDACF,4BAAYA,WAAW,KAAvB,SADE,iDACiG,wBAAQA,WAAW,KAAnB,YADjG,iNAIA,iCACA,6aAIA,oBAAS,CACP,UAAa,sCADf,YAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6hBAwCL,sFAAmE,4BAAYA,WAAW,KAAvB,SAAnE,4GAC6D,4BAAYA,WAAW,KAAvB,OAD7D,qJAGF,iCAAGA,WAAW,KAAQ,CAChB,KAAQ,8FADd,uCAHE,0CAOA,cAACb,EAAD,CAAMc,OAAK,EAACF,QAAQ,QAClB,cAACX,EAAD,CAAKW,QAAQ,OACX,+CACA,6FACA,uBAAG,iCAAGC,WAAW,KAAQ,CACrB,KAAQ,wBADT,0BAKP,cAACb,EAAD,CAAMc,OAAK,EAACC,KAAG,EAACH,QAAQ,QACtB,cAACX,EAAD,CAAKW,QAAQ,OACX,+CACA,8FACA,uBAAG,iCAAGC,WAAW,KAAQ,CACrB,KAAQ,wBADT,yBAIL,cAACZ,EAAD,CAAKW,QAAQ,OACX,mCACA,gGACA,cAACV,EAAD,CAAMc,KAAK,aAAaJ,QAAQ,QAAhC,oBAGJ,mEAAgD,4BAAYC,WAAW,KAAvB,SAAhD,WAA6G,4BAAYA,WAAW,KAAvB,OAA7G,2NAGA,oBAAS,CACP,UAAa,sCADf,oBAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mYAkDL,6DACA,cAACb,EAAD,CAAMY,QAAQ,QACZ,iCAEF,cAACZ,EAAD,CAAMe,KAAG,EAACH,QAAQ,QAChB,uCAEF,cAACZ,EAAD,CAAMiB,MAAM,MAAML,QAAQ,QACxB,uCAEF,cAACZ,EAAD,CAAMkB,QAAM,EAACN,QAAQ,QACnB,wCAEF,cAACZ,EAAD,CAAMe,KAAG,EAACG,QAAM,EAACN,QAAQ,QACvB,wCAEF,cAACZ,EAAD,CAAMe,KAAG,EAACG,QAAM,EAACD,MAAM,MAAML,QAAQ,QACnC,wCAEF,cAACZ,EAAD,CAAMmB,MAAI,EAACP,QAAQ,QACjB,wCAEF,cAACZ,EAAD,CAAMmB,MAAI,EAACJ,KAAG,EAACG,QAAM,EAACN,QAAQ,QAC5B,0CAEF,cAACZ,EAAD,CAAMmB,MAAI,EAACF,MAAM,QAAQL,QAAQ,QAC/B,0CAEF,qXAIA,4GAAyF,4BAAYC,WAAW,KAAvB,uBAAzF,sIAEK,wBAAQA,WAAW,KAAnB,gBAFL,+JAIA,gCACE,mBAAGA,WAAW,cAAd,0LAGF,+CACA,sUAE6E,4BAAYA,WAAW,KAAvB,wBAF7E,iRAKa,4BAAYA,WAAW,KAAvB,aALb,KAMA,uRAEe,iCAAGA,WAAW,KAAQ,CACjC,KAAQ,iCADG,eAFf,kFAI2G,4BAAYA,WAAW,KAAvB,MAJ3G,gBAKG,4BAAYA,WAAW,KAAvB,OALH,YAK+D,4BAAYA,WAAW,KAAvB,MAL/D,KAKmH,4BAAYA,WAAW,KAAvB,MALnH,yBAK2L,4BAAYA,WAAW,KAAvB,UAL3L,8CAK4R,4BAAYA,WAAW,KAAvB,MAL5R,kIAOA,oBAAS,CACP,UAAa,sCADf,qBAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2GAQL,wHACA,cAACV,EAAD,CAASiB,SAAO,EAACC,GAAI,CACnBC,aAAc,GACbV,QAAQ,WACT,cAACR,EAAD,CAAOmB,IAAI,8BAA8BX,QAAQ,WAEnD,0CAAuB,4BAAYC,WAAW,KAAvB,WAAvB,8EACA,mDAAgC,4BAAYA,WAAW,KAAvB,+BAAhC,aAAqH,4BAAYA,WAAW,KAAvB,KAArH,2bAKA,wGAAqF,4BAAYA,WAAW,KAAvB,MAArF,kBACA,sCACA,2SAGA,qDACA,wBACE,oBAAIA,WAAW,MAAf,sBAEF,oBAAS,CACP,UAAa,sCADf,4BAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uNAcL,cAACR,EAAD,CAAWO,QAAQ,aACjB,cAACR,EAAD,CAAOmB,IAAI,8BAA8BX,QAAQ,UACjD,mCACA,gGACA,cAACV,EAAD,CAAMc,KAAK,aAAaJ,QAAQ,QAAhC,mBAEF,mBAAQ,CACN,MAAS,GAET,oBAAIC,WAAW,MAAf,uBAEF,oBAAS,CACP,UAAa,sCADf,6BAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4PAcL,cAACR,EAAD,CAAWO,QAAQ,aACjB,mCACA,gGACA,cAACV,EAAD,CAAMc,KAAK,aAAaQ,GAAG,4BAA4BZ,QAAQ,QAA/D,kBAGA,uBAAG,mCAAKC,WAAW,KAAQ,CACvB,IAAO,qCACP,IAAO,iBAGb,gCACE,mBAAGA,WAAW,cAAd,yKAGF,mBAAQ,CACN,MAAS,GAET,oBAAIA,WAAW,MAAf,6DAEF,oBAAS,CACP,UAAa,sCADf,0BAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0NAYL,cAACR,EAAD,CAAWgB,GAAI,CACbJ,MAAO,YACPQ,WAAY,uEACXb,QAAQ,aACT,yCACA,uBAAG,mCAAKC,WAAW,KAAQ,CACvB,IAAO,8BACP,IAAO,cAEX,sCAEF,8EAA2D,4BAAYA,WAAW,KAAvB,OAA3D,kBACA,oBAAS,CACP,UAAa,sCADf,qBAGA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wkBAuBL,cAACR,EAAD,CAAWU,KAAG,EAACH,QAAQ,aACrB,6DACA,wFACA,uJACA,8MAEA,yBACA,yBACA,yBACA,cAACN,EAAD,CAAQM,QAAQ,UAAhB,yCACA,uBAAG,mCAAKC,WAAW,KAAQ,CACvB,IAAO,oCACP,IAAO,iBAGb,4RAEmC,wBAAQA,WAAW,KAAnB,0DAFnC,wBAGG,wBAAQA,WAAW,KAAnB,yCAHH,yKASJH,EAAWgB,gBAAiB,G,wJClWbC,EAnCA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,IAAb,OACb,YAAC,IAAD,KACE,YAAC,IAAD,CACER,GAAI,CACFS,cAAe,SACfC,UAAW,QACXC,OAAQ,SAGV,YAAC,IAAQH,GACT,YAAC,IAAD,MACA,YAAC,IAAD,CACEI,GAAG,OACHZ,GAAI,CACFa,SAAU,SACVC,KAAM,WACNC,MAAO,OACPC,EAAG,SACHC,GAAI,EACJC,GAAI,CAAC,OAAQ,OAAQ,SACrBC,SAAU,YAEZC,UAAU,oBAETb,GAEH,YAAC,IAAD,S,sPCxBS,aAAC/B,GAAW,IACjB+B,EAA+B/B,EAA/B+B,SAAUc,EAAqB7C,EAArB6C,YAAaC,EAAQ9C,EAAR8C,IADP,EAWpBD,EAAYE,YARdC,EAHsB,EAGtBA,MACAC,EAJsB,EAItBA,YACAC,EALsB,EAKtBA,SACAC,EANsB,EAMtBA,cACAC,EAPsB,EAOtBA,OACAC,EARsB,EAQtBA,qBACAC,EATsB,EAStBA,YACAC,EAVsB,EAUtBA,gBAGIC,EACc,iBAAXJ,E,yWAAP,EACMrB,SAAUqB,EAAOK,MAASL,GAC5B,CAAErB,SAAUqB,GAIZM,EAFeC,wBAAbC,SACcC,MAAM,KACG,GAuBzBC,OACkBC,IAAtBL,GAAyD,KAAtBA,EAC/BM,EAAgBF,IAAkBR,EAElCtB,EAAM,CACVgB,MAPiBA,GAjBK,WAGtB,IAAMiB,EAAeC,IAAMC,SAASC,QAAQrC,GAAUsC,MACpD,SAACC,GAAD,MAA2B,OAApBA,EAAEtE,MAAMe,WAIjB,QAAqBgD,IAAjBE,EACF,OAAOA,EAAajE,MAAM+B,SAQFwC,IAAqBzB,EAAIe,MAAM,KAAKW,MAQ9DvB,cACAC,WACAC,iBAGF,OACE,YAAC,EAAD,CAAQnB,IAAKA,GACVgC,GACC,YAAC,IAAD,CACES,gBAAgB,oBAChBjD,GAAI,CACFe,MAAO,MACPmC,SAAU,QACVC,QAAS,CAAC,OAAQ,OAAQ,YAE5BC,kCAAkC,EAClCC,MAAO,CAAElC,SAAU,YACnBmC,mBAAmB,GAEnB,YAAC,IAAD,OAIJ,YAAC,IAAD,CAAMtD,GAAI,CAAEuD,SAAU,EAAG9C,cAAe,WACtC,uBACET,GAAI,CACFwD,GAAIlB,EAAgB,CAAC,EAAG,EAAG,QAAU,EACrCmB,GAAInB,EAAgB,CAAC,EAAG,EAAG,QAAU,EACrCoB,GAAI,EACJzC,GAAIqB,EAAgB,EAAI,IAGzBV,GACC,YAAC,IAAD,CAAK5B,GAAI,CAAE2D,UAAWrB,EAAgB,EAAI,IACxC,YAAC,IAAD,eAAcsB,QAAM,GAAK5B,EAAzB,CAAsChC,GAAI,CAAEe,MAAO,cAGpDgB,GAAoBO,IAAkBT,IACvC,YAAC,IAAD,CACE7B,GAAI,CACF6D,eAAgB,gBAChB1C,SAAU,WACV2C,WAAY,aACZC,SAAU,CAAC,OAAQ,OAAQ,SAC3BN,GAAKjB,EAAyB,GAAT,OACrBwB,GAAK1B,EAA4B,EAAZ,CAAC,EAAG,EAAG,MAG5BP,GAAmB,YAAC,IAAD,MACpBO,IAAkBT,GAAwB,YAAC,IAAD,OAG/C,YAAC,IAAD,CACE7B,GACEsC,IAAkBT,EACd,CACE,qBAAsB,CACpBoC,WAAY,UAEd,yCAA0C,CACxCpD,SAAU,CAAC,OAAQ,OAAQ,8BAE7B,qBAAsB,CAAEqD,GAAI,SAE9B,IAGL3D","file":"component---content-en-resources-content-advanced-mdx-06d6f25315ef8166e47a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/rejon/community-portal/src/modules/layouts/mdx_layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Tout = makeShortcode(\"Tout\");\nconst Box = makeShortcode(\"Box\");\nconst Link = makeShortcode(\"Link\");\nconst Aligner = makeShortcode(\"Aligner\");\nconst Image = makeShortcode(\"Image\");\nconst InfoBlock = makeShortcode(\"InfoBlock\");\nconst Button = makeShortcode(\"Button\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Advanced`}</h1>\n    <p>{`We finished our intermediate tutorial with the `}<inlineCode parentName=\"p\">{`<Box>`}</inlineCode>{` - a basic element that behaves like an html\n`}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{` and allows us to have many new lines, a.k.a. `}<strong parentName=\"p\">{`children`}</strong>{`, behave like one child when rendered as\na React component. Now it's time to see the advantage of this pattern when creating more complicated, visual\ncomponents which you could not dream of in normal md.`}</p>\n    <h2>{`Touts`}</h2>\n    <p>{`We've covered CTAs, which are just good-looking green boxes; we've covered Callouts, which can be boxes\nof various different colours which also include an icon; and we've covered images. So what happens when we\nwant a good-coloured box, with a nice image to end off our page, direct people to where they need to go next\nor just generally add that extra little touch to our content? Enter the tout...`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`tout.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<Tout image>\n\n<Box>\n\n## Working on a bounty\n\nSee what's expected of you if you work on a Maker community bounty\n\n[Working on a bounty](http://makerdao.com)\n\n</Box>\n\n</Tout>\n\n<Tout image alt>\n\n<Box>\n\n## Working on a bounty\n\nSee what's expected of you if you work on a Maker community bounty.\n\n[Working on a bounty](http://makerdao.com)\n\n</Box>\n\n<Box>\n\n## Say hi!\n\nThe best place to start is in our chat. Say hello and get to know us.\n\n<Link icon=\"rocketchat\">Community chat</Link>\n\n</Box>\n\n</Tout>\n`}</code></pre>\n    <p>{`This is the whole shibang. We're passing in properties like `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{` to get the preset brand image to appear\nat the bottom of the tout, and you can choose another property `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{` to get the tout to change colour from our\nprimary to alternative brand colour. All of these colours can of course be controlled and changed in\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/makerdao/community-portal/blob/r2d/src/gatsby-plugin-theme-ui/index.js\"\n      }}>{`src/gatsby-plugin-theme-ui/index.js`}</a>{`.\nAll of the above renders like this:`}</p>\n    <Tout image mdxType=\"Tout\">\n      <Box mdxType=\"Box\">\n        <h2>{`Working on a bounty`}</h2>\n        <p>{`See what's expected of you if you work on a Maker community bounty`}</p>\n        <p><a parentName=\"p\" {...{\n            \"href\": \"http://makerdao.com\"\n          }}>{`Working on a bounty`}</a></p>\n      </Box>\n    </Tout>\n    <Tout image alt mdxType=\"Tout\">\n      <Box mdxType=\"Box\">\n        <h2>{`Working on a bounty`}</h2>\n        <p>{`See what's expected of you if you work on a Maker community bounty.`}</p>\n        <p><a parentName=\"p\" {...{\n            \"href\": \"http://makerdao.com\"\n          }}>{`Working on a bounty`}</a></p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Say hi!`}</h2>\n        <p>{`The best place to start is in our chat. Say hello and get to know us.`}</p>\n        <Link icon=\"rocketchat\" mdxType=\"Link\">Community chat</Link>\n      </Box>\n    </Tout>\n    <p>{`Of course, you don't have to include the `}<inlineCode parentName=\"p\">{`image`}</inlineCode>{` or the `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{` tags - touts are really flexible like that.\nIf you just want a box - similar to CTAs but with flexible colouring, or similar to Callouts, but without the\nspacing necessary for icons - then you can go right ahead:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`simple-touts.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<Tout>\n\n# Hiya\n\n</Tout>\n\n<Tout alt>\n\nHello World\n\n</Tout>\n\n<Tout color=\"red\">\n\nHello World\n\n</Tout>\n\n<Tout stroke>\n\n# Hello World ?\n\n</Tout>\n\n<Tout alt stroke>\n\n# Hello World ?\n\n</Tout>\n\n<Tout alt stroke color=\"red\">\n\n# Hello World ?\n\n</Tout>\n\n<Tout fade>\n\n# Hello World ?\n\n</Tout>\n\n<Tout fade color=\"black\">\n\n# Hello World ?\n\n</Tout>\n`}</code></pre>\n    <p>{`Which ends up rendering like this:`}</p>\n    <Tout mdxType=\"Tout\">\n      <h1>{`Hiya`}</h1>\n    </Tout>\n    <Tout alt mdxType=\"Tout\">\n      <p>{`Hello World`}</p>\n    </Tout>\n    <Tout color=\"red\" mdxType=\"Tout\">\n      <p>{`Hello World`}</p>\n    </Tout>\n    <Tout stroke mdxType=\"Tout\">\n      <h1>{`Hello World`}</h1>\n    </Tout>\n    <Tout alt stroke mdxType=\"Tout\">\n      <h1>{`Hello World`}</h1>\n    </Tout>\n    <Tout alt stroke color=\"red\" mdxType=\"Tout\">\n      <h1>{`Hello World`}</h1>\n    </Tout>\n    <Tout fade mdxType=\"Tout\">\n      <h1>{`Hello World`}</h1>\n    </Tout>\n    <Tout fade alt stroke mdxType=\"Tout\">\n      <h1>{`Hello World ?`}</h1>\n    </Tout>\n    <Tout fade color=\"black\" mdxType=\"Tout\">\n      <h1>{`Hello World ?`}</h1>\n    </Tout>\n    <p>{`Here you can see how we're combining multiple different kinds of props to get different results. The sky\nreally is the limit once you understand how to compose your props in mdx to give you what you need. If you're\nstruggling to remember all the different kinds of components and the properties they offer, just head on over\nto our cheatsheet.`}</p>\n    <p>{`What makes this component advanced is implied in the final tout, which has props: `}<inlineCode parentName=\"p\">{`fade colour=\"black\"`}</inlineCode>{`. You'll\nsee that the text renders as white, without us doing anything about it. How is that possible?! Through something\ncalled `}<strong parentName=\"p\">{`HexLuminance`}</strong>{`. Basically, we automatically detect how dark the background is and, based on the W3C\nstandards, choose whether to render dark or light text. :mind_blown:`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`NOTE: Based on the prop (stroke/fade) the HexLuminance check changes. This is because stroke doesn't have a\nbackground and fades do, but in both cases a color prop can be provided.`}</p>\n    </blockquote>\n    <h2>{`Returning to images`}</h2>\n    <p>{`When we first showed you how to use images in the basic tutorial, we did not add any props. Thus, there was a\nslight visual issue with the bottom margin, and the image is always left-aligned. Now it's time to fix that.\nImages on the web are a whole rabbit hole, and Gatsby uses a specific plugin - `}<inlineCode parentName=\"p\">{`gatsby-remark-images`}</inlineCode>{` - to process\nand load things extra quickly. Unfortunately, this means it wraps our images and we don't really want to hack around\nin that to get center-alignment or any of the other good things our designers desire. So, we have a wrapper component of\nour own called `}<inlineCode parentName=\"p\">{`<Aligner>`}</inlineCode>{`.`}</p>\n    <p>{`The reason we're only introducing it now is because using it requires understanding a few things about DAI-ui - the\ntheme library we're using - and how it can be used to style React components. Without getting too technical, there is\nsomething called `}<a parentName=\"p\" {...{\n        \"href\": \"https://theme-ui.com/sx-prop\"\n      }}>{`emotion css`}</a>{`, which allows us to style our components inline by adding another prop called `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{`. Just\nlike `}<inlineCode parentName=\"p\">{`mdx`}</inlineCode>{` extends `}<inlineCode parentName=\"p\">{`md`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` extends the possible `}<inlineCode parentName=\"p\">{`styles`}</inlineCode>{`. The variety of ways in which you can use `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` is almost endless,\nso check out our cheatsheet for some basic starting points, and then dive into the beauty that is DAI-ui.`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`aligned-image.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<Aligner xCenter sx={{marginBottom: 4}}>\n\n<Image src=\"../../../images/starfox.png\"/>\n\n</Aligner>\n`}</code></pre>\n    <p>{`Will give us both an image centred in the x-direction, as well as a better margin beneath it:`}</p>\n    <Aligner xCenter sx={{\n      marginBottom: 4\n    }} mdxType=\"Aligner\">\n      <Image src=\"../../../images/starfox.png\" mdxType=\"Image\" />\n    </Aligner>\n    <p>{`We use the prop `}<inlineCode parentName=\"p\">{`xCenter`}</inlineCode>{` here, though there are others available to you, listed in the cheatsheet.`}</p>\n    <p>{`You could have specified `}<inlineCode parentName=\"p\">{`sx={{marginBottom: \"10px\"}}`}</inlineCode>{`, but the `}<inlineCode parentName=\"p\">{`4`}</inlineCode>{` here indicates a preset from DAI-ui -\nwhich you can also find in the gatsby-plugin-theme-ui index file - which helps\nensure that all our margins and padding through the site remain the same, without having to change each individual\ncomponent. So, if you are going to add you own styles, the best practice is to ensure you use the correct preset.\nYou can find a list of presents and their associated values on the cheat sheet page too.`}</p>\n    <p>{`Let's introduce one more component to see all the crazy things we can do with `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` and DAI-ui...`}</p>\n    <h2>{`InfoBlocks`}</h2>\n    <p>{`The InfoBlock is a somewhat peculiar component in our specs, because the designs called for many different\nkinds, with different styles. So, we implemented a bare-bones version and will show you here how to apply advanced\nmdx styles of your own, depending on your needs.`}</p>\n    <p>{`Info Blocks have 3 states:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Image on the Left`}</li>\n    </ol>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`left-image-infoblock.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<InfoBlock>\n\n<Image src=\"../../../images/starfox.png\"/>\n\n# Say hi!\n\nThe best place to start is in our chat. Say hello and get to know us.\n\n<Link icon=\"rocketchat\">Community chat</Link>\n\n</InfoBlock>\n`}</code></pre>\n    <InfoBlock mdxType=\"InfoBlock\">\n      <Image src=\"../../../images/starfox.png\" mdxType=\"Image\" />\n      <h1>{`Say hi!`}</h1>\n      <p>{`The best place to start is in our chat. Say hello and get to know us.`}</p>\n      <Link icon=\"rocketchat\" mdxType=\"Link\">Community chat</Link>\n    </InfoBlock>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Image on the Right`}</li>\n    </ol>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`right-image-infoblock.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<InfoBlock>\n\n# Say hi!\n\nThe best place to start is in our chat. Say hello and get to know us.\n\n<Link icon=\"rocketchat\" to=\"https://chat.makerdao.com\">Community chat</Link>\n\n![InfoBlock](../../../images/infoblock_test.png)\n\n</InfoBlock>\n`}</code></pre>\n    <InfoBlock mdxType=\"InfoBlock\">\n      <h1>{`Say hi!`}</h1>\n      <p>{`The best place to start is in our chat. Say hello and get to know us.`}</p>\n      <Link icon=\"rocketchat\" to=\"https://chat.makerdao.com\" mdxType=\"Link\">\n  Community chat\n      </Link>\n      <p><img parentName=\"p\" {...{\n          \"src\": \"../../../images/infoblock_test.png\",\n          \"alt\": \"InfoBlock\"\n        }}></img></p>\n    </InfoBlock>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you put the image first (whether as a React component or as a normal\nmd image), it will appear on the left, and if you put it last, it will appear on the right.`}</p>\n    </blockquote>\n    <ol {...{\n      \"start\": 3\n    }}>\n      <li parentName=\"ol\">{`No Image priority at all (no Image First OR Last in mdx)`}</li>\n    </ol>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`no-image-infoblock.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<InfoBlock sx={{color: 'onPrimary', background: 'url(https://media3.giphy.com/headers/sazanimation/QGsbVkvFm2uM.gif)'}}>\n\nHello World :)\n\n![Starfox](../../../images/starfox.png)\n\nGood luck!\n\n</InfoBlock>\n`}</code></pre>\n    <InfoBlock sx={{\n      color: 'onPrimary',\n      background: 'url(https://media3.giphy.com/headers/sazanimation/QGsbVkvFm2uM.gif)'\n    }} mdxType=\"InfoBlock\">\n      <p>{`Hello World :)`}</p>\n      <p><img parentName=\"p\" {...{\n          \"src\": \"../../../images/starfox.png\",\n          \"alt\": \"Starfox\"\n        }}></img></p>\n      <p>{`Good luck!`}</p>\n    </InfoBlock>\n    <p>{`To get the Alternative Header style, just apply the `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{` Prop like so:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`alt-infoblock.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<InfoBlock alt>\n\nMaker makes decisions in two ways.\n\nVoting using the Maker Protocol's on-chain governance system.\n\nAnd off-chain, engaging with the community and other stakeholders in places like the forums and the public governance calls.\n\nThe Interim Governance Facilitator is currently tasked with several administrative duties that keep the larger community organized,\nproactive, aware, and ready to make decisions.\n\n<br/>\n<br/>\n<br/>\n\n<Button>Learn how to vote in Maker governance</Button>\n\n![MakerLogo](../../../images/altblock_test.png)\n\n</InfoBlock>\n`}</code></pre>\n    <InfoBlock alt mdxType=\"InfoBlock\">\n      <p>{`Maker makes decisions in two ways.`}</p>\n      <p>{`Voting using the Maker Protocol's on-chain governance system.`}</p>\n      <p>{`And off-chain, engaging with the community and other stakeholders in places like the forums and the public governance calls.`}</p>\n      <p>{`The Interim Governance Facilitator is currently tasked with several administrative duties that keep the larger community organized,\nproactive, aware, and ready to make decisions.`}</p>\n      <br />\n      <br />\n      <br />\n      <Button mdxType=\"Button\">Learn how to vote in Maker governance</Button>\n      <p><img parentName=\"p\" {...{\n          \"src\": \"../../../images/altblock_test.png\",\n          \"alt\": \"MakerLogo\"\n        }}></img></p>\n    </InfoBlock>\n    <p>{`You'll notice that we passed a gif as a background image into the InfoBlock with no preference on the order\nof the image. Yeah, it doesn't look great and you probably won't ever need to do anything that outlandish, but\nit does illustrate a critical point. `}<strong parentName=\"p\">{`You can add whatever style you like to your components`}</strong>{`. You actually\nhave `}<strong parentName=\"p\">{`complete control as a content creator`}</strong>{` over how your content appears, without ever needing a nerdy developer\nto come and insert stuff for you. Congratulations, you are now a junior front-end developer!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","//** @jsx jsx */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Flex, jsx } from \"theme-ui\";\nimport { SEO } from \"@modules/utility\";\n\nimport { Header, Footer, NavigationProvider } from \"@modules/navigation\";\n\nconst Layout = ({ children, seo }) => (\n  <NavigationProvider>\n    <Flex\n      sx={{\n        flexDirection: \"column\",\n        minHeight: \"100vh\",\n        height: \"100%\",\n      }}\n    >\n      <SEO {...seo} />\n      <Header />\n      <Flex\n        as=\"main\"\n        sx={{\n          maxWidth: \"1364px\",\n          flex: \"1 0 auto\",\n          width: \"100%\",\n          m: \"0 auto\",\n          pr: 0,\n          pt: [\"90px\", \"90px\", \"unset\"],\n          position: \"relative\",\n        }}\n        className=\"content-boundary\"\n      >\n        {children}\n      </Flex>\n      <Footer />\n    </Flex>\n  </NavigationProvider>\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","/** @jsx jsx */\nimport React from \"react\";\nimport { Box, Flex, jsx } from \"theme-ui\";\nimport Sticky from \"react-sticky-el\";\nimport { useLocation } from \"@reach/router\";\n\nimport Layout from \"@modules/layouts/site_layout\";\nimport { LanguageSelector } from \"@modules/localization\";\nimport { Sidenav, Breadcrumbs } from \"@modules/navigation\";\nimport { StatusBanner } from \"@modules/ui\";\n\nexport default (props) => {\n  const { children, pageContext, uri } = props;\n  const {\n    title,\n    description,\n    keywords,\n    featuredImage,\n    status,\n    hideLanguageSelector,\n    hideSidenav,\n    hideBreadcrumbs,\n  } = pageContext.frontmatter;\n\n  const statusProps =\n    typeof status === \"object\"\n      ? { children: status.text, ...status }\n      : { children: status };\n\n  const { pathname } = useLocation();\n  const path = pathname.split(\"/\");\n  const currentTopSection = path[2];\n\n  //For the sake of SEO we may want the page title to be based on the first h1 in our MDX file.\n  //if no title is specified in the metadata.\n  const getFirstHeading = () => {\n    //NOTE(Rejon): The children of layouts provided are MDX components!\n    //Find the first mdx child that's an H1\n    const firstHeading = React.Children.toArray(children).find(\n      (c) => c.props.mdxType === \"h1\"\n    );\n\n    //If we have an h1 in our file return it.\n    if (firstHeading !== undefined) {\n      return firstHeading.props.children;\n    }\n\n    return undefined;\n  };\n\n  //SEO page title priority is: frontmatter title -> First H1 in mdx -> Filename fallback from uri\n  //NOTE(Rejon): If the page is an index of a directory, the uri split will be the name of the directory. ie. /en/bounties -> bounties\n  const _pageTitle = title || getFirstHeading() || uri.split(\"/\").pop();\n\n  const hasTopSection =\n    currentTopSection !== undefined && currentTopSection !== \"\";\n  const renderSidenav = hasTopSection && !hideSidenav;\n\n  const seo = {\n    title: _pageTitle,\n    description,\n    keywords,\n    featuredImage,\n  };\n\n  return (\n    <Layout seo={seo}>\n      {renderSidenav && (\n        <Sticky\n          boundaryElement=\".content-boundary\"\n          sx={{\n            width: \"20%\",\n            minWidth: \"260px\",\n            display: [\"none\", \"none\", \"initial\"],\n          }}\n          dontUpdateHolderHeightWhenSticky={true}\n          style={{ position: \"relative\" }}\n          hideOnBoundaryHit={false}\n        >\n          <Sidenav />\n        </Sticky>\n      )}\n\n      <Flex sx={{ flexGrow: 1, flexDirection: \"column\" }}>\n        <article\n          sx={{\n            pl: hasTopSection ? [4, 4, \"64px\"] : 0,\n            mt: hasTopSection ? [4, 4, \"59px\"] : 0,\n            pb: 4,\n            pr: hasTopSection ? 4 : 0,\n          }}\n        >\n          {status && (\n            <Box sx={{ marginTop: hasTopSection ? 2 : 0 }}>\n              <StatusBanner sticky {...statusProps} sx={{ width: \"100%\" }} />\n            </Box>\n          )}\n          {(!hideBreadcrumbs || (hasTopSection && !hideLanguageSelector)) && (\n            <Flex\n              sx={{\n                justifyContent: \"space-between\",\n                position: \"relative\",\n                alignItems: \"flex-start\",\n                flexWrap: [\"wrap\", \"wrap\", \"unset\"],\n                mt: !renderSidenav ? \"2rem\" : \"\",\n                px: !hasTopSection ? [3, 3, 0] : 0,\n              }}\n            >\n              {!hideBreadcrumbs && <Breadcrumbs />}\n              {hasTopSection && !hideLanguageSelector && <LanguageSelector />}\n            </Flex>\n          )}\n          <Box\n            sx={\n              hasTopSection && !hideLanguageSelector\n                ? {\n                    \"& > *:nth-child(1)\": {\n                      lineHeight: \"normal\",\n                    },\n                    \"& > *:nth-child(1), & > *:nth-child(2)\": {\n                      maxWidth: [\"100%\", \"100%\", \"calc(100% - 234px - 1rem)\"],\n                    },\n                    \"& > *:nth-child(2)\": { mb: \"32px\" },\n                  }\n                : {}\n            }\n          >\n            {children}\n          </Box>\n        </article>\n      </Flex>\n    </Layout>\n  );\n};\n"],"sourceRoot":""}