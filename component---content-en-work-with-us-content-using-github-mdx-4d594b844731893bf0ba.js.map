{"version":3,"sources":["webpack:///./content/en/work_with_us/content/using-github.mdx","webpack:///./src/modules/layouts/mdx_layout.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","Process","Box","Button","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","to","isMDXComponent","children","pageContext","uri","frontmatter","title","description","keywords","featuredImage","status","hideLanguageSelector","hideSidenav","hideBreadcrumbs","statusProps","text","currentTopSection","useLocation","pathname","split","hasTopSection","undefined","renderSidenav","seo","firstHeading","Children","toArray","find","c","getFirstHeading","pop","boundaryElement","sx","width","minWidth","display","dontUpdateHolderHeightWhenSticky","style","position","hideOnBoundaryHit","flexGrow","flexDirection","pl","mt","pb","pr","marginTop","sticky","justifyContent","alignItems","flexWrap","px","lineHeight","maxWidth","mb"],"mappings":"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","file":"component---content-en-work-with-us-content-using-github-mdx-4d594b844731893bf0ba.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/community-portal/community-portal/src/modules/layouts/mdx_layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Process = makeShortcode(\"Process\");\nconst Box = makeShortcode(\"Box\");\nconst Button = makeShortcode(\"Button\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`How to use github`}</h1>\n    <Process mdxType=\"Process\">\n      <Box mdxType=\"Box\">\n        <h2>{`Login to Github`}</h2>\n        <p>{`Make sure you have a GitHub account and you’re logged in.`}</p>\n        <Button to=\"https://github.com/login\" mdxType=\"Button\">Go to Github</Button>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Navigate to file/folder`}</h2>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Edit/Add file`}</h2>\n        <h3>{`Edit file`}</h3>\n        <p>{`Once in the file, press the pen icon to edit content. This will create a duplicate of the content in your own GitHub account. This allows making and proposing new changes without overwriting the published content.\n// image`}</p>\n        <h3>{`Add file`}</h3>\n        <p>{`Once in the folder that represents proper page placement, press “Create new file”. This will add a new .md file in your own GitHub account. This allows you to propose the addition of your content without publishing it right away.`}</p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Propose File Change/New file`}</h2>\n        <p>{`Once file changes are complete, a PR will ask for an explaination of changes. This will help any reviewer understand what different, so they can make a decision whether to publish it to the main site.\n// image`}</p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Stage Changes`}</h2>\n        <p>{`Whether uploading a file or making changes to existing work, git will catch all changes made. Depending on the environment (code editor, github's website etc.) initating a live change is as simple as staging the fresh update\n// stage commit image`}</p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Create Pull Request`}</h2>\n        <p>{`//continue narrative of commits\n//image of CTA on Github\n//image of PR a thing`}</p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Review/Merge`}</h2>\n        <p>{`There might be feedback/changes on a PR. A reviewer can approve, request changes, or merge the edited file into the repo. Edits can be made with an open PR (often without leaving Github's website) and the PR will update automatically. Once happy, a reviewer will merge your work and it will be live on the site.`}</p>\n      </Box>\n    </Process>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport {Children, Fragment} from 'react';\nimport { Box, Flex, jsx } from \"theme-ui\";\nimport Sticky from \"react-sticky-el\";\nimport { useLocation } from \"@reach/router\";\n\nimport { LanguageSelector } from \"@modules/localization\";\nimport { Sidenav, Breadcrumbs } from \"@modules/navigation\";\nimport { StatusBanner } from \"@modules/ui\";\nimport { SEO } from \"@modules/utility\";\n\n\nexport default (props) => {\n  const { children, pageContext, uri } = props;\n  const {\n    title,\n    description,\n    keywords,\n    featuredImage,\n    status,\n    hideLanguageSelector,\n    hideSidenav,\n    hideBreadcrumbs,\n  } = pageContext.frontmatter;\n\n  const statusProps =\n    typeof status === \"object\"\n      ? { children: status.text, ...status }\n      : { children: status };\n\n  const { pathname } = useLocation();\n  const path = pathname.split(\"/\");\n  const currentTopSection = path[2];\n\n  //For the sake of SEO we may want the page title to be based on the first h1 in our MDX file.\n  //if no title is specified in the metadata.\n  const getFirstHeading = () => {\n    //NOTE(Rejon): The children of layouts provided are MDX components!\n    //Find the first mdx child that's an H1\n    const firstHeading = Children.toArray(children).find(\n      (c) => c.props.mdxType === \"h1\"\n    );\n\n    //If we have an h1 in our file return it.\n    if (firstHeading !== undefined) {\n      return firstHeading.props.children;\n    }\n\n    return undefined;\n  };\n\n  //SEO page title priority is: frontmatter title -> First H1 in mdx -> Filename fallback from uri\n  //NOTE(Rejon): If the page is an index of a directory, the uri split will be the name of the directory. ie. /en/bounties -> bounties\n  const _pageTitle = title || getFirstHeading() || uri.split(\"/\").pop();\n\n  const hasTopSection =\n    currentTopSection !== undefined && currentTopSection !== \"\";\n  const renderSidenav = hasTopSection && !hideSidenav;\n\n  const seo = {\n    title: _pageTitle,\n    description,\n    keywords,\n    featuredImage,\n  };\n\n  return (\n    <Fragment>\n      <SEO {...seo} />\n      {renderSidenav && (\n        <Sticky\n          boundaryElement=\".content-boundary\"\n          sx={{\n            width: \"20%\",\n            minWidth: \"260px\",\n            display: [\"none\", \"none\", \"initial\"],\n          }}\n          dontUpdateHolderHeightWhenSticky={true}\n          style={{ position: \"relative\" }}\n          hideOnBoundaryHit={false}\n        >\n          <Sidenav />\n        </Sticky>\n      )}\n\n      <Flex sx={{ flexGrow: 1, flexDirection: \"column\" }}>\n        <article\n          sx={{\n            pl: hasTopSection ? [4, 4, \"64px\"] : 0,\n            mt: hasTopSection ? [4, 4, \"59px\"] : 0,\n            pb: 4,\n            pr: hasTopSection ? 4 : 0,\n          }}\n        >\n          {status && (\n            <Box sx={{ marginTop: hasTopSection ? 2 : 0 }}>\n              <StatusBanner sticky {...statusProps} sx={{ width: \"100%\" }} />\n            </Box>\n          )}\n          {(!hideBreadcrumbs || (hasTopSection && !hideLanguageSelector)) && (\n            <Flex\n              sx={{\n                justifyContent: \"space-between\",\n                position: \"relative\",\n                alignItems: \"flex-start\",\n                flexWrap: [\"wrap\", \"wrap\", \"unset\"],\n                mt: !renderSidenav ? \"2rem\" : \"\",\n                px: !hasTopSection ? [3, 3, 0] : 0,\n              }}\n            >\n              {!hideBreadcrumbs && <Breadcrumbs />}\n              {hasTopSection && !hideLanguageSelector && <LanguageSelector />}\n            </Flex>\n          )}\n          <Box\n            sx={\n              hasTopSection && !hideLanguageSelector\n                ? {\n                    \"& > *:nth-of-type(1)\": {\n                      lineHeight: \"normal\",\n                    },\n                    \"& > *:nth-of-type(1), & > *:nth-of-type(2)\": {\n                      maxWidth: [\"100%\", \"100%\", \"calc(100% - 234px - 1rem)\"],\n                    },\n                    \"& > *:nth-of-type(2)\": { mb: \"32px\" },\n                  }\n                : {}\n            }\n          >\n            {children}\n          </Box>\n        </article>\n      </Flex>\n    </Fragment>\n  );\n};\n"],"sourceRoot":""}