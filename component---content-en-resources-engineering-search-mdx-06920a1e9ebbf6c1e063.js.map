{"version":3,"sources":["webpack:///./content/en/resources/engineering/search.mdx","webpack:///./src/modules/layouts/site_layout.js","webpack:///./src/modules/layouts/mdx_layout.js"],"names":["name","_frontmatter","CTA","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","Layout","children","seo","sx","flexDirection","minHeight","height","as","maxWidth","flex","width","m","pr","pt","position","className","pageContext","uri","frontmatter","title","description","keywords","featuredImage","status","hideLanguageSelector","hideSidenav","hideBreadcrumbs","statusProps","text","currentTopSection","useLocation","pathname","split","hasTopSection","undefined","renderSidenav","firstHeading","React","Children","toArray","find","c","getFirstHeading","pop","boundaryElement","minWidth","display","dontUpdateHolderHeightWhenSticky","style","hideOnBoundaryHit","flexGrow","pl","mt","pb","marginTop","sticky","justifyContent","alignItems","flexWrap","px","lineHeight","mb"],"mappings":"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","file":"component---content-en-resources-engineering-search-mdx-06920a1e9ebbf6c1e063.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/rejon/community-portal/src/modules/layouts/mdx_layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component '\" + name + \"' was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CTA = makeShortcode(\"CTA\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`The Intricacies of Search`}</h1>\n    <p>{`We began implementing search using Algolia, but then pivoted to Lunr. The pros were obvious:\nno server side apis, no external requests, search indexing as a part of the build process.\nIt was everything we got out of the old Algolia integration but without the need to manage yet\nanother service. The integration works well, yet it took some time to understand how the indexing\nis handled.`}</p>\n    <h2>{`Why Lunr`}</h2>\n    <p>{`Algolia is great, but it has limits since it's a SAAS (software as service). The indexing and tools\nthey provide are fantastic, and if this were a project that had a larger dependancy on search we'd\nconsider it. However, that's not the case. We don't need an extremely robust elastic search engine\nto index our content pages. We just need a search that meets the minimal requirements of being search.`}</p>\n    <p>{`Lunr is also used widely. If you've used mkdocs or docusaurus recently then you've used Lunr.`}</p>\n    <h2>{`How Lunr Indexes`}</h2>\n    <p>{`Since we're using Gatsby, there's always an integration someone has built, and luckily we have\nthe gatsby-plugin-lunr that does a lot of heavy lifting for us. We provide languages and how to filternodes\nin the options oof our plugin in the `}<inlineCode parentName=\"p\">{`gatsby-config`}</inlineCode>{` like so:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`gatsby-config.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`options: {\n        languages: [\n          {\n            name: \"en\",\n            filterNodes: (node) =>\n              node.frontmatter !== undefined &&\n              node.fileAbsolutePath &&\n              node.fileAbsolutePath.match(\n                /\\\\/en\\\\/(?!header.mdx|index.mdx|404.mdx|.js|.json)/\n              ) !== null,\n          },\n       ]\n}\n`}</code></pre>\n    <CTA mdxType=\"CTA\">\n      <p>{`Here, we filter out nodes that don't have frontmatter, don't have an absolute path, and the\npath doesn't match any file at the top section of our locale like header.mdx, index.mdx, 404.mdx, ect.)`}</p>\n    </CTA>\n    <p>{`For every new locale we add, we just make sure to update it's name, and the regex match `}<inlineCode parentName=\"p\">{`/\\\\/[LOCALE]\\\\/(?!header.mdx|index.mdx|404.mdx|.js|.json)/`}</inlineCode>{`.`}</p>\n    <p>{`We also provide it with which fields to index, if they should store it, and how it should be weighted:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`gatsby-config.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`fields: [\n          { name: \"title\", store: true, attributes: { boost: 20 } },\n          { name: \"keywords\", attributes: { boost: 15 } },\n          { name: \"url\", store: true },\n          { name: \"excerpt\", store: true, attributes: { boost: 5 } },\n        ],\n`}</code></pre>\n    <p>{`Then comes the hard part. How the fields get populated.\nWe provide Lunr with resolvers that match the key we would provide when querying through GraphQL.\nHowever, Lunr prefaces its resolvers with `}<inlineCode parentName=\"p\">{`all`}</inlineCode>{`, so `}<inlineCode parentName=\"p\">{`Mdx`}</inlineCode>{` refers too `}<inlineCode parentName=\"p\">{`allMdx`}</inlineCode>{` in GraphQL:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`gatsby-config.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`resolvers: {\n          Mdx: {\n              title: TitleConverter,\n              url: UrlConverter,\n                ...\n`}</code></pre>\n    <p>{`Since we also have some rules around what a Title is and how the URL is provided from the data we have\n(remember, automagic) we added some util methods that take in a node and transforms its data to meet our needs (TitleConverter, UrlConverter, etc).`}</p>\n    <p>{`Providing an excerpt on search requires more work, since the excerpt is supposed to be our compiled MDX in HTML form. \\\\\nHowever, that doesn't happen during build time, so `}<inlineCode parentName=\"p\">{`excerpt`}</inlineCode>{` is undefined due to a timing issue with Lunr.\nThe solution is to `}</p>\n    <ol>\n      <li parentName=\"ol\">{`Use the description from the frontmatter if provided, or `}</li>\n      <li parentName=\"ol\">{`use the `}<inlineCode parentName=\"li\">{`rawBody`}</inlineCode>{` and parse it manually like so:`}</li>\n    </ol>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`gatsby-config.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`excerpt: (node) => {.\n              if (node.frontmatter.description) {\n                return node.frontmatter.description;\n              }\n              const excerptLength = 136; // Hard coded excerpt length\n              let excerpt = \"\";\n              const tree = remark()\n                .use(remarkFrontmatter)\n                .use(removeFrontmatter)\n                .parse(node.rawBody);\n              visit(tree, \"text\", (node) => {\n                excerpt += node.value;\n              });\n              return \\`\\${excerpt.slice(0, excerptLength)}\\${\n                excerpt.length > excerptLength ? \"...\" : \"\"\n              }\\`;\n            },\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","//** @jsx jsx */\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Flex, jsx } from \"theme-ui\";\nimport { SEO } from \"@modules/utility\";\n\nimport { Header, Footer, NavigationProvider } from \"@modules/navigation\";\n\nconst Layout = ({ children, seo }) => (\n    <NavigationProvider>\n    <Flex\n      sx={{\n        flexDirection: \"column\",\n        minHeight: \"100vh\",\n        height: \"100%\",\n      }}\n    >\n      <SEO {...seo} />\n      <Header />\n      <Flex\n        as=\"main\"\n        sx={{\n          maxWidth: \"1364px\",\n          flex: \"1 0 auto\",\n          width: \"100%\",\n          m: \"0 auto\",\n          pr: 0,\n          pt: [\"90px\", \"90px\", \"unset\"],\n          position: \"relative\",\n        }}\n        className=\"content-boundary\"\n      >\n        {children}\n      </Flex>\n      <Footer />\n    </Flex>\n    </NavigationProvider>\n);\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","/** @jsx jsx */\nimport React from \"react\";\nimport { Box, Flex, jsx } from \"theme-ui\";\nimport Sticky from \"react-sticky-el\";\nimport { useLocation } from \"@reach/router\";\n\nimport Layout from '@modules/layouts/site_layout'\nimport { LanguageSelector } from \"@modules/localization\";\nimport { Sidenav, Breadcrumbs} from \"@modules/navigation\";\nimport { StatusBanner } from \"@modules/ui\";\n\nexport default (props) => {\n  const { children, pageContext, uri } = props;\n  const {\n    title,\n    description,\n    keywords,\n    featuredImage,\n    status,\n    hideLanguageSelector,\n    hideSidenav,\n    hideBreadcrumbs,\n  } = pageContext.frontmatter;\n\n  const statusProps =\n    typeof status === \"object\"\n      ? { children: status.text, ...status }\n      : { children: status };\n\n  const { pathname } = useLocation();\n  const path = pathname.split(\"/\");\n  const currentTopSection = path[2];\n\n  //For the sake of SEO we may want the page title to be based on the first h1 in our MDX file.\n  //if no title is specified in the metadata.\n  const getFirstHeading = () => {\n    //NOTE(Rejon): The children of layouts provided are MDX components!\n    //Find the first mdx child that's an H1\n    const firstHeading = React.Children.toArray(children).find(\n      (c) => c.props.mdxType === \"h1\"\n    );\n\n    //If we have an h1 in our file return it.\n    if (firstHeading !== undefined) {\n      return firstHeading.props.children;\n    }\n\n    return undefined;\n  };\n\n  //SEO page title priority is: frontmatter title -> First H1 in mdx -> Filename fallback from uri\n  //NOTE(Rejon): If the page is an index of a directory, the uri split will be the name of the directory. ie. /en/bounties -> bounties\n  const _pageTitle = title || getFirstHeading() || uri.split(\"/\").pop();\n\n  const hasTopSection =\n    currentTopSection !== undefined && currentTopSection !== \"\";\n  const renderSidenav = hasTopSection && !hideSidenav;\n\n  const seo = {\n    title: _pageTitle,\n    description, \n    keywords,\n    featuredImage\n  };\n\n\n  return (\n    <Layout seo={seo}>\n      {renderSidenav && (\n        <Sticky\n          boundaryElement=\".content-boundary\"\n          sx={{\n            width: \"20%\",\n            minWidth: \"260px\",\n            display: [\"none\", \"none\", \"initial\"],\n          }}\n          dontUpdateHolderHeightWhenSticky={true}\n          style={{ position: \"relative\" }}\n          hideOnBoundaryHit={false}\n        >\n          <Sidenav />\n        </Sticky>\n      )}\n\n      <Flex sx={{ flexGrow: 1, flexDirection: \"column\" }}>\n        <article\n          sx={{\n            pl: hasTopSection ? [4, 4, \"64px\"] : 0,\n            mt: hasTopSection ? [4, 4, \"59px\"] : 0,\n            pb: 4,\n            pr: hasTopSection ? 4 : 0,\n          }}\n        >\n          {status && (\n            <Box sx={{ marginTop: hasTopSection ? 2 : 0 }}>\n              <StatusBanner sticky {...statusProps} sx={{ width: \"100%\" }} />\n            </Box>\n          )}\n          {(!hideBreadcrumbs || (hasTopSection && !hideLanguageSelector)) && (\n            <Flex\n              sx={{\n                justifyContent: \"space-between\",\n                position: \"relative\",\n                alignItems: \"flex-start\",\n                flexWrap: [\"wrap\", \"wrap\", \"unset\"],\n                mt: !renderSidenav ? \"2rem\" : \"\",\n                px: !hasTopSection ? [3, 3, 0] : 0,\n              }}\n            >\n              {!hideBreadcrumbs && <Breadcrumbs />}\n              {hasTopSection && !hideLanguageSelector && <LanguageSelector />}\n            </Flex>\n          )}\n          <Box\n            sx={\n              hasTopSection && !hideLanguageSelector\n                ? {\n                    \"& > *:nth-child(1)\": {\n                      lineHeight: 'normal'\n                    },\n                    \"& > *:nth-child(1), & > *:nth-child(2)\": {\n                      maxWidth: [\"100%\", \"100%\", \"calc(100% - 234px - 1rem)\"],\n                    },\n                    \"& > *:nth-child(2)\": { mb: \"32px\" },\n                  }\n                : {}\n            }\n          >\n            {children}\n          </Box>\n        </article>\n      </Flex>\n    </Layout>\n  );\n};\n"],"sourceRoot":""}