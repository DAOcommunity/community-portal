{"version":3,"sources":["webpack:///./content/en/resources/content/advanced.mdx","webpack:///./src/modules/layouts/mdx_layout.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","Aligner","Image","Column","Box","Chocolate","Icon","Tout","Link","InfoBlock","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","center","sx","marginBottom","src","icon","to","isMDXComponent","useTranslation","locale","t","DEFAULT_LOCALE","allMdx","useStaticQuery","children","pageContext","uri","pagePath","frontmatter","title","description","keywords","featuredImage","status","hideLanguageSelector","hideBreadcrumbs","pathDirs","replace","split","slice","urlNoLocale","join","log","calculateTreeData","edges","sidenavData","breadcrumbData","languageSelectorData","filter","node","UrlConverter","getLocaleFromPath","fileAbsolutePath","map","value","label","statusProps","text","currentTopSection","useLocation","pathname","_pageTitle","firstHeading","Children","toArray","find","c","undefined","getFirstHeading","pop","hasTopSection","renderSidenav","hideSidenav","renderLanguageSelector","renderBreadcrumbs","seo","contentWidthSubtract","width","display","boundaryElement","dontUpdateHolderHeightWhenSticky","style","position","hideOnBoundaryHit","data","currentPath","as","mt","pl","pr","pb","marginTop","sticky","justifyContent","alignItems","flexWrap","px"],"mappings":"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","file":"component---content-en-resources-content-advanced-mdx-8bd2d15f1fe00b72cb29.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/community-portal/community-portal/src/modules/layouts/mdx_layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Aligner = makeShortcode(\"Aligner\");\nconst Image = makeShortcode(\"Image\");\nconst Column = makeShortcode(\"Column\");\nconst Box = makeShortcode(\"Box\");\nconst Chocolate = makeShortcode(\"Chocolate\");\nconst Icon = makeShortcode(\"Icon\");\nconst Tout = makeShortcode(\"Tout\");\nconst Link = makeShortcode(\"Link\");\nconst InfoBlock = makeShortcode(\"InfoBlock\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Advanced`}</h1>\n    <p>{`We finished our intermediate tutorial with the `}<inlineCode parentName=\"p\">{`<Box>`}</inlineCode>{` - a basic element that behaves like an html\n`}<inlineCode parentName=\"p\">{`<div>`}</inlineCode>{` and allows us to have many new lines, a.k.a. `}<strong parentName=\"p\">{`children`}</strong>{`, behave like one child when rendered as\na React component. Now it's time to see the advantage of this pattern when creating more complicated, visual\ncomponents which you could not dream of in normal md.`}</p>\n    <h2>{`Returning to images`}</h2>\n    <p>{`When we first showed you how to use images in the basic tutorial, we did not add any props. Thus, there was a\nslight visual issue with the bottom margin, and the image is always left-aligned. Now it's time to fix that.\nImages on the web are a whole rabbit hole, and Gatsby uses a specific plugin - `}<inlineCode parentName=\"p\">{`gatsby-remark-images`}</inlineCode>{` - to process\nand load things extra quickly. Unfortunately, this means it wraps our images and we don't really want to hack around\nin that to get center-alignment or any of the other good things our designers desire. So, we have a wrapper component of\nour own called `}<inlineCode parentName=\"p\">{`<Aligner>`}</inlineCode>{`.`}</p>\n    <p>{`The reason we're only introducing it now is because using it requires understanding a few things about DAI-ui - the\ntheme library we're using - and how it can be used to style React components. Without getting too technical, there is\nsomething called `}<a parentName=\"p\" {...{\n        \"href\": \"https://theme-ui.com/sx-prop\"\n      }}>{`emotion css`}</a>{`, which allows us to style our components inline by adding another prop called `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{`. Just\nlike `}<inlineCode parentName=\"p\">{`mdx`}</inlineCode>{` extends `}<inlineCode parentName=\"p\">{`md`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` extends the possible `}<inlineCode parentName=\"p\">{`styles`}</inlineCode>{`. The variety of ways in which you can use `}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` is almost endless,\nso check out our cheatsheet for some basic starting points, and then dive into the beauty that is DAI-ui.`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`aligned-image.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<Aligner center sx={{marginBottom: 4}}>\n\n<Image src=\"../../../images/starfox.png\"/>\n\n</Aligner>\n`}</code></pre>\n    <p>{`Will give us both a centred image, as well as a better margin beneath it:`}</p>\n    <Aligner center sx={{\n      marginBottom: 4\n    }} mdxType=\"Aligner\">\n      <Image src=\"../../../images/starfox.png\" mdxType=\"Image\" />\n    </Aligner>\n    <p>{`We use the prop `}<inlineCode parentName=\"p\">{`center`}</inlineCode>{` here, though there are others available to you, listed in the cheatsheet.`}</p>\n    <p>{`You could have specified `}<inlineCode parentName=\"p\">{`sx={{marginBottom: \"10px\"}}`}</inlineCode>{`, but the `}<inlineCode parentName=\"p\">{`4`}</inlineCode>{` here indicates a preset from DAI-ui -\nwhich you can also find in the gatsby-plugin-theme-ui index file - which helps\nensure that all our margins and padding through the site remain the same, without having to change each individual\ncomponent. So, if you are going to add you own styles, the best practice is to ensure you use the correct preset.\nYou can find a list of presents and their associated values on the cheat sheet page too.`}</p>\n    <p>{`Here is the critical point: `}<strong parentName=\"p\">{`You can add whatever style you like to your components`}</strong>{`. You actually\nhave `}<strong parentName=\"p\">{`complete control as a content creator`}</strong>{` over how your content appears, without ever needing a nerdy developer\nto come and insert stuff for you. Congratulations, you are now a junior front-end developer!`}</p>\n    <h2>{`Arranging Content Visually`}</h2>\n    <p>{`Sometimes we'll want to split out content up into visual chunks to make it easier for\nreaders to process and understand at a glance. Enter Columns, Chocolate Boxes, Categories, Touts, and InfoBlocks. `}</p>\n    <h3>{`Column`}</h3>\n    <p>{`The column is a great example of where it is almost always necessary to wrap your children in boxes. Our specs\ncalled for a \"2 Column Comparison component\" but we developers must implement every edge case including when there's only 1 element.`}</p>\n    <p>{`This component follows the same principle as other advanced components in that each child is it's own column element.`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`columns.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<Column>\n\nChild A - Full Width\n\n</Column>\n\n<Column>\n\nChild A - with Sibling\n\nChild B - with Sibling\n\n</Column>\n\n<Column>\n\n<Box>\n\n#### Child A\n\nFull Width with a Header\n\n</Box>\n\n</Column>\n\n\n<Column>\n\n<Box>\n\n#### Child A\n\nWith a sibling and a Header\n\n</Box>\n\n<Box>\n\n#### Child B\n\nWith a sibling and a Header\n\n</Box>\n\n</Column>\n`}</code></pre>\n    <hr></hr>\n    <Column mdxType=\"Column\">\n      <p>{`Child A - Full Width`}</p>\n    </Column>\n    <hr></hr>\n    <Column mdxType=\"Column\">\n      <p>{`Child A - with Sibling`}</p>\n      <p>{`Child B - with Sibling`}</p>\n    </Column>\n    <hr></hr>\n    <Column mdxType=\"Column\">\n      <Box mdxType=\"Box\">\n        <h4>{`Child A`}</h4>\n        <p>{`Full Width with a Header`}</p>\n      </Box>\n    </Column>\n    <hr></hr>\n    <Column mdxType=\"Column\">\n      <Box mdxType=\"Box\">\n        <h4>{`Child A`}</h4>\n        <p>{`With a sibling and a Header`}</p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h4>{`Child B`}</h4>\n        <p>{`With a sibling and a Header`}</p>\n      </Box>\n    </Column>\n    <h3>{`Chocolate Box`}</h3>\n    <p>{`The Chocolate component is a 3 column component. It's the equivalent of using a Grid,\nexcept that it's opinionated on its sizing and gaps. The \"Box\" part of chocolate boxes comes from the combined use of the Box component\nto render content in each grid cell.`}</p>\n    <p>{`The child rule here works the same. Each child is 1 grid cell (Box) in the Chocolate component.\nWe recommend that you use the Box component for more detailed content.`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`chocolate-icons.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<Chocolate>\n\n<Box>\n   \n<Icon name=\"eye\"/>\n\nMeasure community sentiment about issues affecting the MakerDAO ecosystem.\n\n[See example](/)\n\n</Box>\n\n<Box>\n   \n<Icon name=\"search\"/>\n\nDetermine the consensus that something needs to be done in response to a perceived issue.\n\n[See example](/)\n\n</Box>\n\n<Box>\n   \nDetermine the consensus that something needs to be done in response to a perceived issue.\n\n[See example](/)\n\n<Icon name=\"search\"/>\n\n</Box>\n\n<Box>\n\n<Icon name=\"search\"/>\n\nDetermine the consensus that something needs to be done in response to a perceived issue.\n\n[See example](/)\n\n</Box>\n\n</Chocolate>\n`}</code></pre>\n    <Chocolate mdxType=\"Chocolate\">\n      <Box mdxType=\"Box\">\n   \n        <Icon name=\"eye\" mdxType=\"Icon\" />\n        <p>{`Measure community sentiment about issues affecting the MakerDAO ecosystem.`}</p>\n        <p><a parentName=\"p\" {...{\n            \"href\": \"/\"\n          }}>{`See example`}</a></p>\n      </Box>\n      <Box mdxType=\"Box\">\n   \n        <Icon name=\"search\" mdxType=\"Icon\" />\n        <p>{`Determine the consensus that something needs to be done in response to a perceived issue.`}</p>\n        <p><a parentName=\"p\" {...{\n            \"href\": \"/\"\n          }}>{`See example`}</a></p>\n      </Box>\n      <Box mdxType=\"Box\">\n   \nDetermine the consensus that something needs to be done in response to a perceived issue.\n        <p><a parentName=\"p\" {...{\n            \"href\": \"/\"\n          }}>{`See example`}</a></p>\n        <Icon name=\"search\" mdxType=\"Icon\" />\n      </Box>\n      <Box mdxType=\"Box\">\n   \n        <Icon name=\"search\" mdxType=\"Icon\" />\n        <p>{`Determine the consensus that something needs to be done in response to a perceived issue.`}</p>\n        <p><a parentName=\"p\" {...{\n            \"href\": \"/\"\n          }}>{`See example`}</a></p>\n      </Box>\n    </Chocolate>\n    <h3>{`Touts`}</h3>\n    <p>{`Touts are really just a step up on CTAs, which can be arranged to look good on a page,\nsimilar to the chocolate boxes and categories introduced above.`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`tout.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<Tout>\n\n<Box>\n\n## Working on a bounty\n\nSee what's expected of you if you work on a Maker community bounty\n\n[Working on a bounty](#)\n\n</Box>\n\n</Tout>\n\n<Tout>\n\n<Box>\n\n## Working on a bounty\n\nSee what's expected of you if you work on a Maker community bounty.\n\n[Working on a bounty](#)\n\n</Box>\n\n<Box>\n\n## Say hi!\n\nThe best place to start is in our chat. Say hello and get to know us.\n\n<Link icon=\"rocketchat\">Community chat</Link>\n\n</Box>\n\n</Tout>\n`}</code></pre>\n    <Tout mdxType=\"Tout\">\n      <Box mdxType=\"Box\">\n        <h2>{`Working on a bounty`}</h2>\n        <p>{`See what's expected of you if you work on a Maker community bounty`}</p>\n        <p><a parentName=\"p\" {...{\n            \"href\": \"#\"\n          }}>{`Working on a bounty`}</a></p>\n      </Box>\n    </Tout>\n    <Tout mdxType=\"Tout\">\n      <Box mdxType=\"Box\">\n        <h2>{`Working on a bounty`}</h2>\n        <p>{`See what's expected of you if you work on a Maker community bounty.`}</p>\n        <p><a parentName=\"p\" {...{\n            \"href\": \"#\"\n          }}>{`Working on a bounty`}</a></p>\n      </Box>\n      <Box mdxType=\"Box\">\n        <h2>{`Say hi!`}</h2>\n        <p>{`The best place to start is in our chat. Say hello and get to know us.`}</p>\n        <Link icon=\"rocketchat\" mdxType=\"Link\">Community chat</Link>\n      </Box>\n    </Tout>\n    <h2>{`InfoBlocks`}</h2>\n    <p>{`Info Blocks inline all the content you pass into them and have 2 states:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Image on the Left`}</li>\n    </ol>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`left-image-infoblock.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<InfoBlock>\n\n<Image src=\"../../../images/starfox.png\"/>\n\nThe best place to start is in our chat. Say hello and get to know us.\n\n<Link icon=\"rocketchat\">Community chat</Link>\n\n</InfoBlock>\n`}</code></pre>\n    <InfoBlock mdxType=\"InfoBlock\">\n      <Image src=\"../../../images/starfox.png\" mdxType=\"Image\" />\n      <p>{`The best place to start is in our chat. Say hello and get to know us.`}</p>\n      <Link icon=\"rocketchat\" mdxType=\"Link\">Community chat</Link>\n    </InfoBlock>\n    <ol {...{\n      \"start\": 2\n    }}>\n      <li parentName=\"ol\">{`Image on the Right`}</li>\n    </ol>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`right-image-infoblock.mdx`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-md\"\n      }}>{`<InfoBlock>\n\n# Say hi!\n\n<Link icon=\"rocketchat\" to=\"https://chat.makerdao.com\">Community chat</Link>\n\n![Starfox](../../../images/starfox.png)\n\n</InfoBlock>\n`}</code></pre>\n    <InfoBlock mdxType=\"InfoBlock\">\n      <h1>{`Say hi!`}</h1>\n      <Link icon=\"rocketchat\" to=\"https://chat.makerdao.com\" mdxType=\"Link\">\n  Community chat\n      </Link>\n      <p><img parentName=\"p\" {...{\n          \"src\": \"../../../images/starfox.png\",\n          \"alt\": \"InfoBloStarfoxck\"\n        }}></img></p>\n    </InfoBlock>\n    <blockquote>\n      <p parentName=\"blockquote\">{`If you put the image first (whether as a React component or as a normal\nmd image), it will appear on the left, and if you put it anywhere else, it will appear on the right.`}</p>\n    </blockquote>\n    {\n      /*\n      Categories was deprecated to chocolate only. 8-5-2020\n      ### Categories\n      The Categories component is nearly the same as the Chocolate component, except that it\n      has a different visual design (it's width is 107.58% and not 100% of the content's parent container).\n      It also has a different rendering style depending on whether there are 2 or 4 elements.\n      The stark difference for you is that you only control the content of the Category container,\n      not the entire box itself (i.e. you can't change the background of a category box, only it's contents).\n      The component is also capable of having a unique status bar placement. All that's needed is that\n      your categories child has the status banner first:\n      ```md:title=categories.mdx\n      <Categories>\n      <Box>\n      <StatusBanner warning> Funding is currently closed </StatusBanner>\n      \n      <Icon name=\"metamask\"/>\n      [Hackathons](/funding/hackathons)\n      Organising a hackathon? Apply for a hackathon micro grant.\n      </Box>\n      <Box>\n      <Icon name=\"metamask\"/>\n      [Hackathons](/funding/hackathons)\n      Organising a hackathon? Apply for a hackathon micro grant.\n      </Box>\n      </Categories>\n      ```\n      <Categories>\n      <Box>\n      <StatusBanner warning> Funding is currently closed </StatusBanner>\n      <Icon name=\"metamask\" />\n      [Hackathons](/funding/hackathons)\n      Organising a hackathon? Apply for a hackathon micro grant.\n      </Box>\n      <Box>\n      <Icon name=\"metamask\" />\n      [Hackathons](/funding/hackathons)\n      Organising a hackathon? Apply for a hackathon micro grant.\n      </Box>\n      </Categories>\n      */\n    }\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport {Children, Fragment} from 'react';\nimport { Box, Flex, jsx } from \"theme-ui\";\nimport Sticky from \"react-sticky-el\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\n\nimport {MobileNav} from '@modules/navigation';\nimport { useTranslation } from \"@modules/localization/\";\nimport { LanguageSelector } from \"@modules/localization\";\nimport { Sidenav, Breadcrumbs } from \"@modules/navigation\";\nimport { StatusBanner } from \"@modules/ui\";\nimport calculateTreeData from \"@modules/navigation/calculateTreeData\";\nimport { SEO } from \"@modules/utility\";\nimport { UrlConverter, getLocaleFromPath } from \"@utils\";\n\nexport default (props) => {\n  const { locale, t, DEFAULT_LOCALE } = useTranslation();\n\n  const { allMdx } = useStaticQuery(graphql`\n    query getMDXData {\n      # Regex for all files that are NOT config files\n      allMdx(\n        filter: {\n          fileAbsolutePath: {\n            regex: \"//([\\\\\\\\w]{2})/(?!header.mdx|index.mdx|sidenav.mdx|example.mdx|social.mdx|footer.mdx|404.mdx|.js|.json)/\"\n          }\n        }\n      ) {\n        edges {\n          node {\n            headings(depth: h1) {\n              value\n            }\n            fileAbsolutePath\n            frontmatter {\n              title\n              order\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const { children, pageContext, uri } = props;\n\n  const {pagePath} = pageContext; \n  const {\n    title,\n    description,\n    keywords,\n    featuredImage,\n    status,\n    hideLanguageSelector,\n    hideBreadcrumbs,\n  } = pageContext.frontmatter;\n\n  const pathDirs = pagePath.replace(/^\\/|\\/$/g, \"\").split(\"/\").slice(1);\n  const urlNoLocale = pathDirs.join(\"/\");\n  console.log(pathDirs[0]);\n  const { sidenavData, breadcrumbData } = calculateTreeData(\n    allMdx.edges,\n    pathDirs[0],\n    DEFAULT_LOCALE,\n    locale,\n    pathDirs\n  );\n\n  //NOTE(Rejon): Must be in the shape that React Select expects for it's options.\n  //Something that can be queried? \n  const languageSelectorData = allMdx.edges\n    .filter(({ node }) => {\n      //Drop the end slash, remove the locale, compare the string\n      //TODO(Rejon): This works for now, but can probably be optimized with a Regex solution.\n      const nodeURL = UrlConverter(node)\n        .replace(/^\\/|\\/$/g, \"\")\n        .split(\"/\")\n        .slice(1)\n        .join(\"/\");\n\n      return (\n        nodeURL === urlNoLocale &&\n        getLocaleFromPath(node.fileAbsolutePath) !== locale\n      );\n    })\n    .map(({ node }) => ({\n      value: UrlConverter(node),\n      label: t(\n        \"Language\",\n        null,\n        null,\n        getLocaleFromPath(node.fileAbsolutePath)\n      ),\n    }));\n\n  const statusProps =\n    typeof status === \"object\"\n      ? { children: status.text, ...status }\n      : { children: status };\n\n  const { pathname } = useLocation();\n  const path = pathname.split(\"/\");\n  const currentTopSection = path[2];\n\n  //For the sake of SEO we may want the page title to be based on the first h1 in our MDX file.\n  //if no title is specified in the metadata.\n  const getFirstHeading = () => {\n    //NOTE(Rejon): The children of layouts provided are MDX components!\n    //Find the first mdx child that's an H1\n    const firstHeading = Children.toArray(children).find(\n      (c) => c.props.mdxType === \"h1\"\n    );\n\n    //If we have an h1 in our file return it.\n    if (firstHeading !== undefined) {\n      return firstHeading.props.children;\n    }\n\n    return undefined;\n  };\n\n  //SEO page title priority is: frontmatter title -> First H1 in mdx -> Filename fallback from uri\n  //NOTE(Rejon): If the page is an index of a directory, the uri split will be the name of the directory. ie. /en/bounties -> bounties\n  const _pageTitle = title || getFirstHeading() || uri.split(\"/\").pop();\n\n  const hasTopSection =\n    currentTopSection !== undefined && currentTopSection !== \"\";\n\n  const renderSidenav = pageContext.frontmatter && !pageContext.frontmatter.hideSidenav && hasTopSection;\n  const renderLanguageSelector = hasTopSection && !hideLanguageSelector;\n  const renderBreadcrumbs = (!hideBreadcrumbs || (hasTopSection && !hideLanguageSelector));\n\n  const seo = {\n    title: _pageTitle,\n    description,\n    keywords,\n    featuredImage,\n  };\n\n  let contentWidthSubtract = renderLanguageSelector ? 234 : 0; //NOTE(Rejon): Based on word from design, language selector being hidden doesn't change content width.\n\n  if (renderSidenav) {\n    contentWidthSubtract += 256;\n  }\n\n\n  return (\n    <Fragment>\n      {renderSidenav\n          &&\n          <Box\n            sx={{\n              width: \"256px\",\n              display: [\"none\", \"none\", \"initial\"],\n            }}\n          >\n          <Sticky\n            boundaryElement=\".content-boundary\"\n            dontUpdateHolderHeightWhenSticky={true}\n            style={{ position: \"relative\" }}\n            hideOnBoundaryHit={false}\n            sx={{display: [\"none\", \"none\", \"initial\"]}}\n          >\n            <Sidenav data={sidenavData} currentPath={pagePath}/>\n          </Sticky>\n        </Box>\n      }\n      <Box as=\"article\" sx={{\n        width: ['100%', '100%', `calc(100% - ${contentWidthSubtract}px)`],\n        mt: hasTopSection ? [4, 4, \"59px\"] : 0,\n        pl: hasTopSection ? [4, 4, \"64px\"] : 0,\n        pr: hasTopSection ? [4, 4, 0] : 0,\n        pb: 4,\n        \n      }}>\n      <SEO {...seo} />\n      \n      {status && (\n        <Box sx={{ marginTop: hasTopSection ? 2 : 0 }}>\n          <StatusBanner sticky {...statusProps} sx={{ width: \"100%\" }} />\n        </Box>\n      )}\n      {renderBreadcrumbs && \n        <Flex\n          sx={{\n            justifyContent: \"space-between\",\n            position: \"relative\",\n            alignItems: \"flex-start\",\n            flexWrap: [\"wrap\", \"wrap\", \"unset\"],\n            px: !hasTopSection ? [3, 3, 0] : 0,\n          }}\n        >\n          <Breadcrumbs data={breadcrumbData} pathDirs={pathDirs}/>\n        </Flex>\n      }\n      <Box sx={{display: ['block', 'block', 'none']}}>\n        {/* MOBILE LANGUAGE SELECTOR */}\n        {renderLanguageSelector && <LanguageSelector data={languageSelectorData} pagePath={pagePath}/>}\n      </Box>\n      <Box>\n        {children}\n      </Box>\n      </Box>\n      \n      <Box sx={{display: ['none', 'none', 'block']}}>\n        {/* DESKTOP LANGUAGE SELECTOR */}\n        {renderLanguageSelector && <LanguageSelector data={languageSelectorData} pagePath={pagePath}/>}\n      </Box>\n      <MobileNav sidenavData={sidenavData}/>\n    </Fragment>\n  );\n};\n"],"sourceRoot":""}