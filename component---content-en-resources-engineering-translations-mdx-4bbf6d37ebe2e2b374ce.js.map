{"version":3,"sources":["webpack:///./content/en/resources/engineering/translations.mdx","webpack:///./src/modules/layouts/mdx_layout.js"],"names":["name","_frontmatter","CTA","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","children","pageContext","uri","frontmatter","title","description","keywords","featuredImage","status","hideLanguageSelector","hideBreadcrumbs","statusProps","text","currentTopSection","useLocation","pathname","split","hasTopSection","undefined","seo","firstHeading","Children","toArray","find","c","getFirstHeading","pop","sx","marginTop","sticky","width","justifyContent","position","alignItems","flexWrap","px","lineHeight","maxWidth","mb"],"mappings":"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","file":"component---content-en-resources-engineering-translations-mdx-4bbf6d37ebe2e2b374ce.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/community-portal/community-portal/src/modules/layouts/mdx_layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst CTA = makeShortcode(\"CTA\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Translations and the UI`}</h1>\n    <p>{`Translations can present a challenge. But not if you're our lead developer. Our philosophy is that\n\"content creators write the website\", so the `}<inlineCode parentName=\"p\">{`content`}</inlineCode>{` folder therefore decides how the site is rendered,\nincluding translated content. However, this is an issue when translating inline UI elements that we won't\nprovide in MDX (like the Search bar). This means there's a break in how we can translate copy like \"Search\"\nand \"No results\" into the current locale...`}</p>\n    <h2>{`Why Not i18n or another library?`}</h2>\n    <p>{`i18n is a Javascript API that allows developers an easy and \"lightweight\" (<- we'll get to that) way of translating\ntextual content for a node based application. It's been great, but the reason we decided NOT to use it for this\nproject is because it would couple translated content with our code. This is a big no-no, as it goes against our WYSIWYG\nphilosophy for the content folder and means that content creators would have to translate text in 2 different places.`}</p>\n    <p>{`Add to this the fact that the i18n package for gatsby, and other frameworks, has a tendency to be larger than necessary.\nWe believe that keeping things simple will be a positive for the scale of our application. Therefore, we present:`}</p>\n    <h2>{`useTranslation aka MaximumLang`}</h2>\n    <p>{`useTranslation is a hook developed by RÃ©jon Taylor-Foster with inspiration from and reference to\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://w11i.me/how-to-build-multilingual-website-in-next-js\"\n      }}>{`this blog`}</a>{`. It is capable of being initialized\ninside a functional components and exports the current site's locale, and a `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` function.`}</p>\n    <h3>{`How to translate in code`}</h3>\n    <p>{`If your `}<inlineCode parentName=\"p\">{`en/UI.json`}</inlineCode>{` looks like this:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Language\": \"English\",\n    \"Search\": \"Search\",\n    \"No_Results\": \"No results for '{{searchText}}'\",\n    \"Home\": \"Home\"\n  }\n}\n`}</code></pre>\n    <p>{`you can have it translated and render the word \"Search\" by writing the following:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`component-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from \"@modules/localization/useTranslation\";\n\nconst ComponentExample = () => {\n  const { locale, t } = useTranslation();\n\n  return <p>{t(\"Search\")}</p>;\n};\n`}</code></pre>\n    <h3>{`LangSpaces`}</h3>\n    <p>{`We can extend the capabilities of this simple `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` function with what we call LangSpaces (Language Space):`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Language\": \"English\",\n    \"Search\": \"Search\",\n    \"No_Results\": \"No results for '{{searchText}}'\",\n    \"Home\": \"Home\",\n    \"Errors\": {\n      \"error_a\": \"This is an error inside of a langspace called Errors\"\n    }\n  }\n}\n`}</code></pre>\n    <p>{`you can have it translate and render \"error_a\" by writing the following:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`component-langspace-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from \"@modules/localization/useTranslation\";\n\nconst ComponentExample = () => {\n  const { locale, t } = useTranslation();\n\n  return <p>{t(\"error_a\", \"Errors\")}</p>;\n};\n`}</code></pre>\n    <p>{`For the sake of quality of life it's possible to pass in a default lang space for your current translation as well:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`component-langspace-default-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from \"@modules/localization/useTranslation\";\n\nconst ComponentExample = () => {\n  const { locale, t } = useTranslation(\"Errors\"); //<- Notice\n\n  return (\n    <p>{t(\"error_a\")}</p> //<- Notice\n  );\n};\n`}</code></pre>\n    <h3>{`Variables and Plurals`}</h3>\n    <p>{`You want the variable of counter included and with plurals? No problem, anything inside `}<inlineCode parentName=\"p\">{`{{}}`}</inlineCode>{` will be replaced when rendered:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Friend\": \"A Friend\",\n    \"Friend_plural\": \"{{count}} Friends\",\n    \"VariableExample\": \"My name is {{name}}\"\n  }\n}\n`}</code></pre>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`variable-component-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from '@modules/localization/useTranslation'\n\nconst ComponentExample = () => {\n   const {locale, t} = useTranslation();\n\n  return (\n       <p>{t(\"Friend\", null, {count: 0})}</p> //0 Friends\n       <p>{t(\"Friend\", null, {count: 1})}</p> //Friend\n       <p>{t(\"Friend\", null, {count: 2})}</p> //2 Friends, ect.\n       <p>{t(\"VariableExample\", null, {name: \"RÃ©jon\"})}</p> // My name is RÃ©jon\n   )\n}\n`}</code></pre>\n    <h3>{`Advanced Plurals`}</h3>\n    <p>{`Because different locales can have multiple plurals, and different ways of counting (ie. Arabic),\nwe have a system in place to handle counting differently if the strict variable is added to the `}<inlineCode parentName=\"p\">{`t`}</inlineCode>{` function like so:\n`}<inlineCode parentName=\"p\">{`t('Friend', null, {count: 1, strict: true})`}</inlineCode>{`.`}</p>\n    <p>{`Your json will look like:\nNOTE: `}<inlineCode parentName=\"p\">{`Friend`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Friend_plural`}</inlineCode>{` are still valid, but will be overriden when strict is provided to the variables argument.`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Friend\": \"A Friend\",\n    \"Friend_plural\": \"{{count}} Friends\",\n    \"Friend_0\": \"No Friends\",\n    \"Friend_1\": \"A Friend\",\n    \"Friend_2\": \"Two Friends\",\n    \"Friend_3\": \"Few Friends\",\n    \"Friend_4\": \"Many Friends\",\n    \"Friend_5\": \"Other/Lots of Friends\"\n  }\n}\n`}</code></pre>\n    <p>{`Your output will look something like this:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`advanced-variable-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from '@modules/localization/useTranslation'\n\nconst ComponentExample = () => {\n   const {locale, t} = useTranslation();\n\n  return (\n       <p>{t(\"Friend\", null, {count: 0, strict: true})}</p> //No Friends (key: Friend_0)\n       <p>{t(\"Friend\", null, {count: 1, strict: true})}</p> //A Friend (key: Friend_1)\n       <p>{t(\"Friend\", null, {count: 2, strict: true})}</p> //Two Friends (key: Friend_2)\n       <p>{t(\"Friend\", null, {count: 5, strict: true})}</p> //Other/Lots of Friends (key: Friend_5)\n   )\n}\n`}</code></pre>\n    <CTA mdxType=\"CTA\">\n      <p>{`NOTE: If your count goes past 4 or is less than 0, it will default to key_5`}</p>\n    </CTA>\n    <h3>{`Getting a localized string from another locale`}</h3>\n    <p>{`Let's say you're currently on the English locale, but you need a string from the French locale,\nbut also want to keep your current locale. Say no more fam:`}</p>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`en/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Language\": \"English\"\n  }\n}\n`}</code></pre>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`fr/UI.json`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"UI\": {\n    \"Language\": \"FranÃ§ais\"\n  }\n}\n`}</code></pre>\n    <div {...{\n      \"className\": \"gatsby-code-title prism-code-title\"\n    }}>{`multilang-example.js`}</div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import useTranslation from '@modules/localization/useTranslation'\n\nconst ComponentExample = () => {\n   const {locale, t} = useTranslation(); //Current locale is \"en\"\n\n  return (\n       <p>{t(\"Language\")}</p> //English\n       <p>{t(\"Language\",null,null,'fr')}</p> //FranÃ§ais\n   )\n}\n`}</code></pre>\n    <p>{`These are just examples for the sake of documentation. For an indepth on how the function works,\nsee the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/makerdao/community-portal/blob/r2d/src/modules/utility/useTranslation.js\"\n      }}>{`comments in code`}</a>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport {Children, Fragment} from 'react';\nimport { Box, Flex, jsx } from \"theme-ui\";\nimport Sticky from \"react-sticky-el\";\nimport { useLocation } from \"@reach/router\";\n\nimport { LanguageSelector } from \"@modules/localization\";\nimport { Sidenav, Breadcrumbs } from \"@modules/navigation\";\nimport { StatusBanner } from \"@modules/ui\";\nimport { SEO } from \"@modules/utility\";\n\n\nexport default (props) => {\n  const { children, pageContext, uri } = props;\n  const {\n    title,\n    description,\n    keywords,\n    featuredImage,\n    status,\n    hideLanguageSelector,\n    hideBreadcrumbs,\n  } = pageContext.frontmatter;\n\n  const statusProps =\n    typeof status === \"object\"\n      ? { children: status.text, ...status }\n      : { children: status };\n\n  const { pathname } = useLocation();\n  const path = pathname.split(\"/\");\n  const currentTopSection = path[2];\n\n  //For the sake of SEO we may want the page title to be based on the first h1 in our MDX file.\n  //if no title is specified in the metadata.\n  const getFirstHeading = () => {\n    //NOTE(Rejon): The children of layouts provided are MDX components!\n    //Find the first mdx child that's an H1\n    const firstHeading = Children.toArray(children).find(\n      (c) => c.props.mdxType === \"h1\"\n    );\n\n    //If we have an h1 in our file return it.\n    if (firstHeading !== undefined) {\n      return firstHeading.props.children;\n    }\n\n    return undefined;\n  };\n\n  //SEO page title priority is: frontmatter title -> First H1 in mdx -> Filename fallback from uri\n  //NOTE(Rejon): If the page is an index of a directory, the uri split will be the name of the directory. ie. /en/bounties -> bounties\n  const _pageTitle = title || getFirstHeading() || uri.split(\"/\").pop();\n\n  const hasTopSection =\n    currentTopSection !== undefined && currentTopSection !== \"\";\n\n  const seo = {\n    title: _pageTitle,\n    description,\n    keywords,\n    featuredImage,\n  };\n\n  return (\n    <Fragment>\n      <SEO {...seo} />\n      \n      {status && (\n        <Box sx={{ marginTop: hasTopSection ? 2 : 0 }}>\n          <StatusBanner sticky {...statusProps} sx={{ width: \"100%\" }} />\n        </Box>\n      )}\n          {(!hideBreadcrumbs || (hasTopSection && !hideLanguageSelector)) && (\n            <Flex\n              sx={{\n                justifyContent: \"space-between\",\n                position: \"relative\",\n                alignItems: \"flex-start\",\n                flexWrap: [\"wrap\", \"wrap\", \"unset\"],\n                px: !hasTopSection ? [3, 3, 0] : 0,\n              }}\n            >\n              {!hideBreadcrumbs && <Breadcrumbs />}\n              {hasTopSection && !hideLanguageSelector && <LanguageSelector />}\n            </Flex>\n          )}\n          <Box\n            sx={\n              hasTopSection && !hideLanguageSelector\n                ? {\n                    \"& > *:nth-of-type(1)\": {\n                      lineHeight: \"normal\",\n                    },\n                    \"& > *:nth-of-type(1), & > *:nth-of-type(2)\": {\n                      maxWidth: [\"100%\", \"100%\", \"calc(100% - 234px - 1rem)\"],\n                    },\n                    \"& > *:nth-of-type(2)\": { mb: \"32px\" },\n                  }\n                : {}\n            }\n          >\n            {children}\n          </Box>\n    </Fragment>\n  );\n};\n"],"sourceRoot":""}