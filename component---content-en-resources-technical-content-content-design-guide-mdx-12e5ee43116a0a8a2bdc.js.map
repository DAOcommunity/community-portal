{"version":3,"sources":["webpack:///./content/en/resources/technical-content/content-design-guide.mdx","webpack:///./src/modules/layouts/mdx_layout.js"],"names":["_frontmatter","makeShortcode","name","props","console","warn","Checklist","Callout","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","isMDXComponent","useTranslation","locale","t","DEFAULT_LOCALE","allMdx","useStaticQuery","children","pageContext","uri","pagePath","frontmatter","title","description","keywords","featuredImage","status","hideLanguageSelector","hideBreadcrumbs","pathDirs","replace","split","slice","urlNoLocale","join","log","calculateTreeData","edges","sidenavData","breadcrumbData","languageSelectorData","filter","node","UrlConverter","getLocaleFromPath","fileAbsolutePath","map","value","label","statusProps","text","currentTopSection","useLocation","pathname","_pageTitle","firstHeading","Children","toArray","find","c","undefined","getFirstHeading","pop","hasTopSection","renderSidenav","hideSidenav","renderLanguageSelector","renderBreadcrumbs","seo","contentWidthSubtract","sx","width","display","boundaryElement","dontUpdateHolderHeightWhenSticky","style","position","hideOnBoundaryHit","data","currentPath","as","mt","pl","pr","pb","marginTop","sticky","justifyContent","alignItems","flexWrap","px"],"mappings":"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","file":"component---content-en-resources-technical-content-content-design-guide-mdx-12e5ee43116a0a8a2bdc.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/community-portal/community-portal/src/modules/layouts/mdx_layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Checklist = makeShortcode(\"Checklist\");\nconst Callout = makeShortcode(\"Callout\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Content Design Guide`}</h1>\n    <p>{`These are best practices for designing content. This advice won't necessarily translate well to more editorial content but should help when writing or updating any pages intended for life on the community-development platform.`}</p>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://www.notion.so/Content-design-guide-ec389e89a9264ba2b206873f8f3aa714\"\n      }}>{`Originally crafted with 💚  by Ryan Cordell`}</a></p>\n    <h3>{`Pre- Publish Checklist`}</h3>\n    <Checklist mdxType=\"Checklist\">\n      <p>{`Removed/explained all acronyms`}</p>\n      <p>{`Removed any gendered pronouns`}</p>\n      <p>{`All titles are written in sentence case`}</p>\n      <p>{`No latin abbreviations`}</p>\n      <p>{`No metaphors`}</p>\n    </Checklist>\n    <p><strong parentName=\"p\">{`Images`}</strong></p>\n    <Checklist mdxType=\"Checklist\">\n      <p>{`All images/videos have alt text`}</p>\n      <p>{`Any text in images is also in text on the page`}</p>\n    </Checklist>\n    <p><strong parentName=\"p\">{`Explain`}</strong></p>\n    <Checklist mdxType=\"Checklist\">\n      <p>{`No knowledge is assumed`}</p>\n      <p>{`There are links or explanations to any specialist terms`}</p>\n    </Checklist>\n    <p><strong parentName=\"p\">{`Formatting and reading experience`}</strong></p>\n    <Checklist mdxType=\"Checklist\">\n      <p>{`All lists are formatted as bullet points rather than prose`}</p>\n      <p>{`Checked the reading age in `}<a parentName=\"p\" {...{\n          \"href\": \"http://hemingwayapp.com\"\n        }}>{`hemingwayapp.com`}</a></p>\n      <p>{`All numbers are written out as numbers`}</p>\n      <p>{`Most links are at the end of sentences`}</p>\n      <p>{`All link copy describes the destination`}</p>\n      <p>{`Content is chunked up into small sections`}</p>\n      <p>{`Any unnecessary passive language has been made active`}</p>\n    </Checklist>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Note that emoji inline support is disabled for now. 😮 <- but you can insert them manually. 🤠`}</p>\n    </blockquote>\n    <p><strong parentName=\"p\">{`Emoji`}</strong></p>\n    <Checklist mdxType=\"Checklist\">\n      <p>{`Checked how the emojis render on different devices`}</p>\n      <p>{`Checked that you're not using culturally insensitive emojis`}</p>\n      <p>{`No emojis are used in place of words`}</p>\n    </Checklist>\n    <h3>{`Accessibility and inclusivity 🌈`}</h3>\n    <h4>{`Avoid acronyms`}</h4>\n    <p>{`Acronyms require a certain level of knowledge making them exclusionary to new users. The Maker community should feel like an open community not a club.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Try and avoid acronyms`}</li>\n      <li parentName=\"ul\">{`If it's unavoidable, like a page dedicated to Multi-collateral Dai, be sure to write it out in full the first time you use it: Multi-collateral Dai (MCD)`}</li>\n    </ul>\n    <h3>{`Avoid colloquialisms and metaphors`}</h3>\n    <p>{`Colloquialisms and metaphors are also exclusionary as understanding may rely on being from the same local geography as the writer.`}</p>\n    <h4>{`✅ Do`}</h4>\n    <p>{`Apply for hackathon funding`}</p>\n    <h4>{`❌ Don't`}</h4>\n    <p>{`Apply for Hackathon Funding`}</p>\n    <h3>{`Avoid \"e.g.\", \"i.e.\" and other latin abbreviations`}</h3>\n    <p>{`These aren't accessible as screen readers don't deal very well with them. Opt for phrases like \"such as\" or \"like\" instead of the abbreviations.`}</p>\n    <h3>{`Avoid big words`}</h3>\n    <p>{`Another hangover of our schooling days is the tendency to try and sound clever by using big and fancy words. But you don't want your web copy to read like a Victorian author. Always question whether there is a simpler alternative in your writing.`}</p>\n    <h4>{`✅ DO`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Buy`}</li>\n      <li parentName=\"ul\">{`Mix`}</li>\n      <li parentName=\"ul\">{`Agree`}</li>\n    </ul>\n    <h4>{`❌ DON'T`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`Purchase`}</li>\n      <li parentName=\"ul\">{`Amalgamation`}</li>\n      <li parentName=\"ul\">{`Acquiesce`}</li>\n    </ul>\n    <h3>{`Avoid gendered pronouns`}</h3>\n    <p>{`If you need to refer to a \"his\", \"her\" or \"their\", use \"their\" for the most inclusive content. This shouldn't come up too often if you're addressing the user as \"you\".`}</p>\n    <h3>{`Explain 💬`}</h3>\n    <h4>{`Explain blockchainisms and financial jargon`}</h4>\n    <p>{`It's fair to assume that some of the terminology on the site may be highly technical or require a lot of financial understanding. Don't assume that all users are familiar with this.`}</p>\n    <p>{`If a concept can't be explained using more familiar terminology, add an explanation or a link to an explanation`}</p>\n    <ul>\n      <li parentName=\"ul\">{`You can generate Dai using a vault. Vaults are a Maker product that allow you to deposit Eth and withdraw Dai.`}</li>\n      <li parentName=\"ul\">{`You can generate Dai using a `}<a parentName=\"li\" {...{\n          \"href\": \"/learn/vaults\"\n        }}>{`vault`}</a>{`.`}</li>\n    </ul>\n    <h3>{`Explain images`}</h3>\n    <p>{`If you're using an image that features text, like a process diagram ensure that the content is written in a machine-readable format. Screen readers can't detect words in an image and neither will search engines.`}</p>\n    <p>{`All images should also have alt text that describes the image.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/images/Logo-Dai-4x.png\",\n        \"alt\": \"The Dai logo\"\n      }}></img></p>\n    <p><em parentName=\"p\">{`Alt text`}</em>{`: The Dai logo`}</p>\n    <h3>{`Formatting and reading experience ✏️`}</h3>\n    <h3>{`Favor active language over passive language`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`\"Generate Dai\" vs \"Dai can be generated\"`}</li>\n    </ul>\n    <Callout mdxType=\"Callout\">\n      <p>{`💡 Tip: if you can add \"`}<strong parentName=\"p\">{`by bitcoiners`}</strong>{`\" to the end of a sentence and it still makes sense, it's probably passive...`}</p>\n    </Callout>\n    <h3>{`Aim for a maximum reading age of: 9 (the lower the better)`}</h3>\n    <p>{`Don't consider this as \"dumbing down\" your content. A lower reading age simply makes the reading experience more enjoyable and more efficient. Remember users haven't come to your site to experience your prose, they've come to complete a task or get information.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Pop your content in `}<a parentName=\"li\" {...{\n          \"href\": \"http://hemingwayapp.com\"\n        }}>{`hemingwayapp.com`}</a>{` to check its reading age and remove any unnecessary adverbs`}</li>\n    </ul>\n    <h3>{`Favour small chunks of content with clear headings`}</h3>\n    <p>{`As mentioned above, users haven't come to your site to experience your prose, they've come to complete a task or get information. They'll likely scan your page looking for keywords related to their task. Short chunks of content with clear headings helps users scan.`}</p>\n    <p>{`Front load your headings. Aim to give the user information they need in the heading rather than just signal that the information they need might be in that section.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`\"Apply to `}<a parentName=\"li\" {...{\n          \"href\": \"mailto:grants@makerdao.com\"\n        }}>{`grants@makerdao.com`}</a>{`\" not \"How to apply\"`}</li>\n      <li parentName=\"ul\">{`Notice how this document has been structured to front-load the titles`}</li>\n    </ul>\n    <h3>{`Make sure links describe the destination`}</h3>\n    <p>{`Avoid vague link text like \"learn more\". It's more helpful to set the user's expectations around where the link will take them.`}</p>\n    <h4>{`✅ DO`}</h4>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#\"\n      }}>{`Meetup promotion guide`}</a></p>\n    <h4>{`❌ DON'T`}</h4>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"#\"\n      }}>{`Find out more`}</a></p>\n    <h3>{`Avoid links mid-text where possible`}</h3>\n    <p>{`This makes content harder to scan and can be problematic for autistic users.`}</p>\n    <h4>{`✅ DO`}</h4>\n    <p>{`We'll show you how to promote your meetup in our `}<a parentName=\"p\" {...{\n        \"href\": \"#\"\n      }}>{`Meetup promotion guide`}</a></p>\n    <h4>{`❌ DON'T`}</h4>\n    <p>{`Read the `}<a parentName=\"p\" {...{\n        \"href\": \"#\"\n      }}>{`Meetup promotion guide`}</a>{` to find out how to promote your meetup.`}</p>\n    <h3>{`Use bullet points to split up long paragraphs/lists`}</h3>\n    <p>{`Bullet point lists are a great format for parsing list information. Don't write out lists in paragraph format as it makes content far easier to miss.`}</p>\n    <h4>{`✅ Do`}</h4>\n    <p>{`You'll need to be familiar with:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`GitHub`}</li>\n      <li parentName=\"ul\">{`Markdown`}</li>\n      <li parentName=\"ul\">{`Maker`}</li>\n      <li parentName=\"ul\">{`Google docs`}</li>\n    </ul>\n    <h4>{`❌ DON'T`}</h4>\n    <p>{`You'll need to be familiar with GitHub, Markdown, Maker and Google docs.`}</p>\n    <h3>{`Use numerals`}</h3>\n    <p>{`It's often thought that you should spell out numbers under 10. However, writing all numbers as numerals is better for scan readers.`}</p>\n    <h4>{`✅ Do`}</h4>\n    <p>{`Ryan has made 5 contributions`}</p>\n    <h4>{`❌ DON'T`}</h4>\n    <p>{`yan has made five contributions`}</p>\n    <h3>{`Emojis 🤪`}</h3>\n    <h4>{`Emojis should support not replace words`}</h4>\n    <p>{`For example: don't use a money emoji (💰 ) instead of saying money.`}</p>\n    <h3>{`Consider cultural implications`}</h3>\n    <p>{`That friendly thumbs up emoji ( 👍 ) can actually be rude in middle eastern culture (and other places) – it means \"up yours!\". Another example might be the plate and cutlery emoji ( 🍽 ) which naturally biases western culture.`}</p>\n    <h3>{`Check how they look on all devices`}</h3>\n    <p>{`Some emojis are unrecognizable on certain devices.`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/images/cookies-emoji.png\",\n        \"alt\": \"Cookies\"\n      }}></img></p>\n    <p>{`Are you referring to cookies or crackers?`}</p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/images/detective.png\",\n        \"alt\": \"Detective\"\n      }}></img></p>\n    <p>{`Are you referring to a friendly detective or a shady stalker?`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport {Children, Fragment} from 'react';\nimport { Box, Flex, jsx } from \"theme-ui\";\nimport Sticky from \"react-sticky-el\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\n\nimport {MobileNav} from '@modules/navigation';\nimport { useTranslation } from \"@modules/localization/\";\nimport { LanguageSelector } from \"@modules/localization\";\nimport { Sidenav, Breadcrumbs } from \"@modules/navigation\";\nimport { StatusBanner } from \"@modules/ui\";\nimport calculateTreeData from \"@modules/navigation/calculateTreeData\";\nimport { SEO } from \"@modules/utility\";\nimport { UrlConverter, getLocaleFromPath } from \"@utils\";\n\nexport default (props) => {\n  const { locale, t, DEFAULT_LOCALE } = useTranslation();\n\n  const { allMdx } = useStaticQuery(graphql`\n    query getMDXData {\n      # Regex for all files that are NOT config files\n      allMdx(\n        filter: {\n          fileAbsolutePath: {\n            regex: \"//([\\\\\\\\w]{2})/(?!header.mdx|index.mdx|sidenav.mdx|example.mdx|social.mdx|footer.mdx|404.mdx|.js|.json)/\"\n          }\n        }\n      ) {\n        edges {\n          node {\n            headings(depth: h1) {\n              value\n            }\n            fileAbsolutePath\n            frontmatter {\n              title\n              order\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const { children, pageContext, uri } = props;\n\n  const {pagePath} = pageContext; \n  const {\n    title,\n    description,\n    keywords,\n    featuredImage,\n    status,\n    hideLanguageSelector,\n    hideBreadcrumbs,\n  } = pageContext.frontmatter;\n\n  const pathDirs = pagePath.replace(/^\\/|\\/$/g, \"\").split(\"/\").slice(1);\n  const urlNoLocale = pathDirs.join(\"/\");\n  console.log(pathDirs[0]);\n  const { sidenavData, breadcrumbData } = calculateTreeData(\n    allMdx.edges,\n    pathDirs[0],\n    DEFAULT_LOCALE,\n    locale,\n    pathDirs\n  );\n\n  //NOTE(Rejon): Must be in the shape that React Select expects for it's options.\n  //Something that can be queried? \n  const languageSelectorData = allMdx.edges\n    .filter(({ node }) => {\n      //Drop the end slash, remove the locale, compare the string\n      //TODO(Rejon): This works for now, but can probably be optimized with a Regex solution.\n      const nodeURL = UrlConverter(node)\n        .replace(/^\\/|\\/$/g, \"\")\n        .split(\"/\")\n        .slice(1)\n        .join(\"/\");\n\n      return (\n        nodeURL === urlNoLocale &&\n        getLocaleFromPath(node.fileAbsolutePath) !== locale\n      );\n    })\n    .map(({ node }) => ({\n      value: UrlConverter(node),\n      label: t(\n        \"Language\",\n        null,\n        null,\n        getLocaleFromPath(node.fileAbsolutePath)\n      ),\n    }));\n\n  const statusProps =\n    typeof status === \"object\"\n      ? { children: status.text, ...status }\n      : { children: status };\n\n  const { pathname } = useLocation();\n  const path = pathname.split(\"/\");\n  const currentTopSection = path[2];\n\n  //For the sake of SEO we may want the page title to be based on the first h1 in our MDX file.\n  //if no title is specified in the metadata.\n  const getFirstHeading = () => {\n    //NOTE(Rejon): The children of layouts provided are MDX components!\n    //Find the first mdx child that's an H1\n    const firstHeading = Children.toArray(children).find(\n      (c) => c.props.mdxType === \"h1\"\n    );\n\n    //If we have an h1 in our file return it.\n    if (firstHeading !== undefined) {\n      return firstHeading.props.children;\n    }\n\n    return undefined;\n  };\n\n  //SEO page title priority is: frontmatter title -> First H1 in mdx -> Filename fallback from uri\n  //NOTE(Rejon): If the page is an index of a directory, the uri split will be the name of the directory. ie. /en/bounties -> bounties\n  const _pageTitle = title || getFirstHeading() || uri.split(\"/\").pop();\n\n  const hasTopSection =\n    currentTopSection !== undefined && currentTopSection !== \"\";\n\n  const renderSidenav = pageContext.frontmatter && !pageContext.frontmatter.hideSidenav && hasTopSection;\n  const renderLanguageSelector = hasTopSection && !hideLanguageSelector;\n  const renderBreadcrumbs = (!hideBreadcrumbs || (hasTopSection && !hideLanguageSelector));\n\n  const seo = {\n    title: _pageTitle,\n    description,\n    keywords,\n    featuredImage,\n  };\n\n  let contentWidthSubtract = renderLanguageSelector ? 234 : 0; //NOTE(Rejon): Based on word from design, language selector being hidden doesn't change content width.\n\n  if (renderSidenav) {\n    contentWidthSubtract += 256;\n  }\n\n\n  return (\n    <Fragment>\n      {renderSidenav\n          &&\n          <Box\n            sx={{\n              width: \"256px\",\n              display: [\"none\", \"none\", \"initial\"],\n            }}\n          >\n          <Sticky\n            boundaryElement=\".content-boundary\"\n            dontUpdateHolderHeightWhenSticky={true}\n            style={{ position: \"relative\" }}\n            hideOnBoundaryHit={false}\n            sx={{display: [\"none\", \"none\", \"initial\"]}}\n          >\n            <Sidenav data={sidenavData} currentPath={pagePath}/>\n          </Sticky>\n        </Box>\n      }\n      <Box as=\"article\" sx={{\n        width: ['100%', '100%', `calc(100% - ${contentWidthSubtract}px)`],\n        mt: hasTopSection ? [4, 4, \"59px\"] : 0,\n        pl: hasTopSection ? [4, 4, \"64px\"] : 0,\n        pr: hasTopSection ? [4, 4, 0] : 0,\n        pb: 4,\n        \n      }}>\n      <SEO {...seo} />\n      \n      {status && (\n        <Box sx={{ marginTop: hasTopSection ? 2 : 0 }}>\n          <StatusBanner sticky {...statusProps} sx={{ width: \"100%\" }} />\n        </Box>\n      )}\n      {renderBreadcrumbs && \n        <Flex\n          sx={{\n            justifyContent: \"space-between\",\n            position: \"relative\",\n            alignItems: \"flex-start\",\n            flexWrap: [\"wrap\", \"wrap\", \"unset\"],\n            px: !hasTopSection ? [3, 3, 0] : 0,\n          }}\n        >\n          <Breadcrumbs data={breadcrumbData} pathDirs={pathDirs}/>\n        </Flex>\n      }\n      <Box sx={{display: ['block', 'block', 'none']}}>\n        {/* MOBILE LANGUAGE SELECTOR */}\n        {renderLanguageSelector && <LanguageSelector data={languageSelectorData} pagePath={pagePath}/>}\n      </Box>\n      <Box>\n        {children}\n      </Box>\n      </Box>\n      \n      <Box sx={{display: ['none', 'none', 'block']}}>\n        {/* DESKTOP LANGUAGE SELECTOR */}\n        {renderLanguageSelector && <LanguageSelector data={languageSelectorData} pagePath={pagePath}/>}\n      </Box>\n      <MobileNav sidenavData={sidenavData}/>\n    </Fragment>\n  );\n};\n"],"sourceRoot":""}