{"version":3,"sources":["webpack:///./content/en/resources/page-templates/process-page.mdx","webpack:///./src/modules/layouts/mdx_layout.js"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","useTranslation","locale","t","DEFAULT_LOCALE","allMdx","useStaticQuery","children","pageContext","uri","pagePath","frontmatter","title","description","keywords","featuredImage","status","hideLanguageSelector","hideBreadcrumbs","pathDirs","replace","split","slice","urlNoLocale","join","console","log","calculateTreeData","edges","sidenavData","breadcrumbData","languageSelectorData","filter","node","UrlConverter","getLocaleFromPath","fileAbsolutePath","map","value","label","statusProps","text","currentTopSection","useLocation","pathname","_pageTitle","firstHeading","Children","toArray","find","c","undefined","getFirstHeading","pop","hasTopSection","renderSidenav","hideSidenav","renderLanguageSelector","renderBreadcrumbs","seo","contentWidthSubtract","sx","width","display","boundaryElement","dontUpdateHolderHeightWhenSticky","style","position","hideOnBoundaryHit","data","currentPath","as","mt","pl","pr","pb","marginTop","sticky","justifyContent","alignItems","flexWrap","px"],"mappings":"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","file":"component---content-en-resources-page-templates-process-page-mdx-de245bea5eafae60d67f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/community-portal/community-portal/src/modules/layouts/mdx_layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{`Process Page`}</h1>\n    <h2>{`Like Use Github`}</h2>\n    <h2>{`Page purpose`}</h2>\n    <p>{`Walk a user through a process step-by-step so they can either`}</p>\n    <ul>\n      <li parentName=\"ul\">{`achieve it`}</li>\n      <li parentName=\"ul\">{`understand it for expectation setting`}</li>\n    </ul>\n    <h2>{`Page structure`}</h2>\n    <ol>\n      <li parentName=\"ol\">{`Intro the process`}</li>\n      <li parentName=\"ol\">{`Explain each step of the proocess`}</li>\n      <li parentName=\"ol\">{`Link to other resources that help with the process`}</li>\n    </ol>\n    <h2><strong parentName=\"h2\">{`Page title`}</strong></h2>\n    <p>{`Describe the process you'll be explaining. Example: The translation process`}</p>\n    <h2><strong parentName=\"h2\">{`Intro`}</strong></h2>\n    <p>{`This intro should situate the user and explain what they can do on this page. Be sure to address the user and explain what they can do here rather than talking from Maker's perspective. Remember you're talking directly to our users. For example:`}</p>\n    <h2>{`Before the process`}</h2>\n    <p>{`Before you start writing out the steps, make sure you add anything the user should be aware of first before they start.`}</p>\n    <p>{`![Writing Roles]`}{`(/content/images/writer reviewer two column.png)`}</p>\n    <p>{`In the example above, it was important the user understood the two roles involved in the note-taking process. This is important pre-reading before understanding the steps involved.`}</p>\n    <p><strong parentName=\"p\">{`This space is for anything that helps users understand the steps.`}</strong></p>\n    <h2>{`The steps`}</h2>\n    <p>{`Each step should be either:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`an instruction`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`For example: Forward your .md file to your project coordinator`}</li>\n        </ul></li>\n      <li parentName=\"ul\">{`an explanation of a stage in the process`}<ul parentName=\"li\">\n          <li parentName=\"ul\">{`For example: Writers complete their notes with the recording\\\\`}</li>\n        </ul></li>\n    </ul>\n    <p><strong parentName=\"p\">{`The step content itself will largely depend on the context. But try and make it easy to follow by addressing the user and explaining what they should do.`}</strong></p>\n    <p>{`Format steps best on the content needs`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Use bulleted lists to list options`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">\n            <p parentName=\"li\">{`for example:`}</p>\n            <pre parentName=\"li\"><code parentName=\"pre\" {...{}}>{`Once you’ve received the recording you can complete the summary by:\n\n- adding time-anchored-links\n\n- adding relevant links\n\n- fixing unclear or unfinished notes.\n\nLet the reviewer know once you’re finished with this.\n`}</code></pre>\n            <p parentName=\"li\">{`Use a callout if there are additional tips or warnings about a step in the process\nFor example:`}</p>\n          </li>\n        </ul>\n      </li>\n    </ul>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/content/images/process-callout.png\",\n        \"alt\": \"Callout in process\"\n      }}></img></p>\n    <ul>\n      <li parentName=\"ul\">{`Link users out to other relevant resources or explanations where needed.`}</li>\n    </ul>\n    <h2>{`Suggested reading`}</h2>\n    <p>{`This section is particularly useful if there is additional reading material or resources related to the process. For example the Note-taking template is related to the Note-taking process. Although you've probably linked to that in the steps, it's useful to include a more obvious link in case a user is scanning for this content.`}</p>\n    <p>{`Alternatively this section can be used to:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`direct users to where they can get help – this is a last resort as we want the page to answer their questions. But at least this provides them with a suitable way to get what they want.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`As a general rule of thumb, use this section to expose other pages within the section.`}</strong></p>\n    <p><img parentName=\"p\" {...{\n        \"src\": \"/content/images/resources-touts-process.png\",\n        \"alt\": \"Resources touts\"\n      }}></img></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","/** @jsx jsx */\nimport {Children, Fragment} from 'react';\nimport { Box, Flex, jsx } from \"theme-ui\";\nimport Sticky from \"react-sticky-el\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { useLocation } from \"@reach/router\";\n\nimport {MobileNav} from '@modules/navigation';\nimport { useTranslation } from \"@modules/localization/\";\nimport { LanguageSelector } from \"@modules/localization\";\nimport { Sidenav, Breadcrumbs } from \"@modules/navigation\";\nimport { StatusBanner } from \"@modules/ui\";\nimport calculateTreeData from \"@modules/navigation/calculateTreeData\";\nimport { SEO } from \"@modules/utility\";\nimport { UrlConverter, getLocaleFromPath } from \"@utils\";\n\nexport default (props) => {\n  const { locale, t, DEFAULT_LOCALE } = useTranslation();\n\n  const { allMdx } = useStaticQuery(graphql`\n    query getMDXData {\n      # Regex for all files that are NOT config files\n      allMdx(\n        filter: {\n          fileAbsolutePath: {\n            regex: \"//([\\\\\\\\w]{2})/(?!header.mdx|index.mdx|sidenav.mdx|example.mdx|social.mdx|footer.mdx|404.mdx|.js|.json)/\"\n          }\n        }\n      ) {\n        edges {\n          node {\n            headings(depth: h1) {\n              value\n            }\n            fileAbsolutePath\n            frontmatter {\n              title\n              order\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const { children, pageContext, uri } = props;\n\n  const {pagePath} = pageContext; \n  const {\n    title,\n    description,\n    keywords,\n    featuredImage,\n    status,\n    hideLanguageSelector,\n    hideBreadcrumbs,\n  } = pageContext.frontmatter;\n\n  const pathDirs = pagePath.replace(/^\\/|\\/$/g, \"\").split(\"/\").slice(1);\n  const urlNoLocale = pathDirs.join(\"/\");\n  console.log(pathDirs[0]);\n  const { sidenavData, breadcrumbData } = calculateTreeData(\n    allMdx.edges,\n    pathDirs[0],\n    DEFAULT_LOCALE,\n    locale,\n    pathDirs\n  );\n\n  //NOTE(Rejon): Must be in the shape that React Select expects for it's options.\n  //Something that can be queried? \n  const languageSelectorData = allMdx.edges\n    .filter(({ node }) => {\n      //Drop the end slash, remove the locale, compare the string\n      //TODO(Rejon): This works for now, but can probably be optimized with a Regex solution.\n      const nodeURL = UrlConverter(node)\n        .replace(/^\\/|\\/$/g, \"\")\n        .split(\"/\")\n        .slice(1)\n        .join(\"/\");\n\n      return (\n        nodeURL === urlNoLocale &&\n        getLocaleFromPath(node.fileAbsolutePath) !== locale\n      );\n    })\n    .map(({ node }) => ({\n      value: UrlConverter(node),\n      label: t(\n        \"Language\",\n        null,\n        null,\n        getLocaleFromPath(node.fileAbsolutePath)\n      ),\n    }));\n\n  const statusProps =\n    typeof status === \"object\"\n      ? { children: status.text, ...status }\n      : { children: status };\n\n  const { pathname } = useLocation();\n  const path = pathname.split(\"/\");\n  const currentTopSection = path[2];\n\n  //For the sake of SEO we may want the page title to be based on the first h1 in our MDX file.\n  //if no title is specified in the metadata.\n  const getFirstHeading = () => {\n    //NOTE(Rejon): The children of layouts provided are MDX components!\n    //Find the first mdx child that's an H1\n    const firstHeading = Children.toArray(children).find(\n      (c) => c.props.mdxType === \"h1\"\n    );\n\n    //If we have an h1 in our file return it.\n    if (firstHeading !== undefined) {\n      return firstHeading.props.children;\n    }\n\n    return undefined;\n  };\n\n  //SEO page title priority is: frontmatter title -> First H1 in mdx -> Filename fallback from uri\n  //NOTE(Rejon): If the page is an index of a directory, the uri split will be the name of the directory. ie. /en/bounties -> bounties\n  const _pageTitle = title || getFirstHeading() || uri.split(\"/\").pop();\n\n  const hasTopSection =\n    currentTopSection !== undefined && currentTopSection !== \"\";\n\n  const renderSidenav = pageContext.frontmatter && !pageContext.frontmatter.hideSidenav && hasTopSection;\n  const renderLanguageSelector = hasTopSection && !hideLanguageSelector;\n  const renderBreadcrumbs = (!hideBreadcrumbs || (hasTopSection && !hideLanguageSelector));\n\n  const seo = {\n    title: _pageTitle,\n    description,\n    keywords,\n    featuredImage,\n  };\n\n  let contentWidthSubtract = renderLanguageSelector ? 234 : 0; //NOTE(Rejon): Based on word from design, language selector being hidden doesn't change content width.\n\n  if (renderSidenav) {\n    contentWidthSubtract += 256;\n  }\n\n\n  return (\n    <Fragment>\n      {renderSidenav\n          &&\n          <Box\n            sx={{\n              width: \"256px\",\n              display: [\"none\", \"none\", \"initial\"],\n            }}\n          >\n          <Sticky\n            boundaryElement=\".content-boundary\"\n            dontUpdateHolderHeightWhenSticky={true}\n            style={{ position: \"relative\" }}\n            hideOnBoundaryHit={false}\n            sx={{display: [\"none\", \"none\", \"initial\"]}}\n          >\n            <Sidenav data={sidenavData} currentPath={pagePath}/>\n          </Sticky>\n        </Box>\n      }\n      <Box as=\"article\" sx={{\n        width: ['100%', '100%', `calc(100% - ${contentWidthSubtract}px)`],\n        mt: hasTopSection ? [4, 4, \"59px\"] : 0,\n        pl: hasTopSection ? [4, 4, \"64px\"] : 0,\n        pr: hasTopSection ? [4, 4, 0] : 0,\n        pb: 4,\n        \n      }}>\n      <SEO {...seo} />\n      \n      {status && (\n        <Box sx={{ marginTop: hasTopSection ? 2 : 0 }}>\n          <StatusBanner sticky {...statusProps} sx={{ width: \"100%\" }} />\n        </Box>\n      )}\n      {renderBreadcrumbs && \n        <Flex\n          sx={{\n            justifyContent: \"space-between\",\n            position: \"relative\",\n            alignItems: \"flex-start\",\n            flexWrap: [\"wrap\", \"wrap\", \"unset\"],\n            px: !hasTopSection ? [3, 3, 0] : 0,\n          }}\n        >\n          <Breadcrumbs data={breadcrumbData} pathDirs={pathDirs}/>\n        </Flex>\n      }\n      <Box sx={{display: ['block', 'block', 'none']}}>\n        {/* MOBILE LANGUAGE SELECTOR */}\n        {renderLanguageSelector && <LanguageSelector data={languageSelectorData} pagePath={pagePath}/>}\n      </Box>\n      <Box>\n        {children}\n      </Box>\n      </Box>\n      \n      <Box sx={{display: ['none', 'none', 'block']}}>\n        {/* DESKTOP LANGUAGE SELECTOR */}\n        {renderLanguageSelector && <LanguageSelector data={languageSelectorData} pagePath={pagePath}/>}\n      </Box>\n      <MobileNav sidenavData={sidenavData}/>\n    </Fragment>\n  );\n};\n"],"sourceRoot":""}